<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on Hello World</title><link>/categories/spring/</link><description>Recent content in Spring on Hello World</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Fri, 25 Aug 2023 14:58:26 +0000</lastBuildDate><atom:link href="/categories/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring</title><link>/posts/spring/</link><pubDate>Fri, 25 Aug 2023 14:58:26 +0000</pubDate><guid>/posts/spring/</guid><description>&lt;h1 id="springmvc">SpringMVC&lt;/h1>
&lt;p>&lt;img src="https://image.runtimes.cc/202404051458028.png" alt="">&lt;/p>
&lt;p>总结：&lt;/p>
&lt;ol>
&lt;li>首先请求进入DispatcherServlet 由DispatcherServlet 从HandlerMappings中提取对应的Handler。&lt;/li>
&lt;li>2.此时只是获取到了对应的Handle，然后得去寻找对应的适配器，即：HandlerAdapter。&lt;/li>
&lt;li>拿到对应HandlerAdapter时，这时候开始调用对应的Handler处理业务逻辑了。 （这时候实际上已经执行完了我们的Controller） 执行完成之后返回一个ModeAndView&lt;/li>
&lt;li>这时候交给我们的ViewResolver通过视图名称查找出对应的视图然后返回。&lt;/li>
&lt;li>最后 渲染视图 返回渲染后的视图 &amp;ndash;&amp;gt;响应请求。&lt;/li>
&lt;/ol>
&lt;h2 id="初始化过程">初始化过程&lt;/h2>
&lt;p>version 5.3.8&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.HttpServletBean#init&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() &lt;span style="color:#66d9ef">throws&lt;/span> ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 子类实现,初始化web环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Let subclasses do whatever initialization they like.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initServletBean();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.FrameworkServlet#initServletBean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">initServletBean&lt;/span>() &lt;span style="color:#66d9ef">throws&lt;/span> ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 初始化spring上下文&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">webApplicationContext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> initWebApplicationContext();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 子类实现&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initFrameworkServlet();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.FrameworkServlet#initWebApplicationContext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> WebApplicationContext &lt;span style="color:#a6e22e">initWebApplicationContext&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebApplicationContext rootContext &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebApplicationContextUtils.&lt;span style="color:#a6e22e">getWebApplicationContext&lt;/span>(getServletContext());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebApplicationContext wac &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">webApplicationContext&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// A context instance was injected at construction time -&amp;gt; use it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wac &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">webApplicationContext&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (wac &lt;span style="color:#66d9ef">instanceof&lt;/span> ConfigurableWebApplicationContext) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConfigurableWebApplicationContext cwac &lt;span style="color:#f92672">=&lt;/span> (ConfigurableWebApplicationContext) wac;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>cwac.&lt;span style="color:#a6e22e">isActive&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The context has not yet been refreshed -&amp;gt; provide services such as&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// setting the parent context, setting the application context id, etc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (cwac.&lt;span style="color:#a6e22e">getParent&lt;/span>() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The context instance was injected without an explicit parent -&amp;gt; set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// the root application context (if any; may be null) as the parent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cwac.&lt;span style="color:#a6e22e">setParent&lt;/span>(rootContext);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//配置和刷新spring容器（重要）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//这个无非就是初始化spring ioc的环境，创建bean和实例化bean等操作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//这个方法最终也是调用refresh()方法，已在spring源码解析中解析过了&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configureAndRefreshWebApplicationContext(cwac);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (wac &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// No context instance was injected at construction time -&amp;gt; see if one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// has been registered in the servlet context. If one exists, it is assumed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// that the parent context (if any) has already been set and that the&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// user has performed any initialization such as setting the context id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wac &lt;span style="color:#f92672">=&lt;/span> findWebApplicationContext();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (wac &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// No context instance is defined for this servlet -&amp;gt; create a local one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wac &lt;span style="color:#f92672">=&lt;/span> createWebApplicationContext(rootContext);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">refreshEventReceived&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Either the context is not a ConfigurableApplicationContext with refresh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// support or the context injected at construction time had already been&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// refreshed -&amp;gt; trigger initial onRefresh manually here.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">synchronized&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">onRefreshMonitor&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 初始化DispatcherServlet的配置initStrategies()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onRefresh(wac);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">publishContext&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Publish the context as a servlet context attribute.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String attrName &lt;span style="color:#f92672">=&lt;/span> getServletContextAttributeName();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getServletContext().&lt;span style="color:#a6e22e">setAttribute&lt;/span>(attrName, wac);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> wac;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.DispatcherServlet#onRefresh &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">onRefresh&lt;/span>(ApplicationContext context) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// //初始化springmvc的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initStrategies(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>总体流程:&lt;/p></description><content>&lt;h1 id="springmvc">SpringMVC&lt;/h1>
&lt;p>&lt;img src="https://image.runtimes.cc/202404051458028.png" alt="">&lt;/p>
&lt;p>总结：&lt;/p>
&lt;ol>
&lt;li>首先请求进入DispatcherServlet 由DispatcherServlet 从HandlerMappings中提取对应的Handler。&lt;/li>
&lt;li>2.此时只是获取到了对应的Handle，然后得去寻找对应的适配器，即：HandlerAdapter。&lt;/li>
&lt;li>拿到对应HandlerAdapter时，这时候开始调用对应的Handler处理业务逻辑了。 （这时候实际上已经执行完了我们的Controller） 执行完成之后返回一个ModeAndView&lt;/li>
&lt;li>这时候交给我们的ViewResolver通过视图名称查找出对应的视图然后返回。&lt;/li>
&lt;li>最后 渲染视图 返回渲染后的视图 &amp;ndash;&amp;gt;响应请求。&lt;/li>
&lt;/ol>
&lt;h2 id="初始化过程">初始化过程&lt;/h2>
&lt;p>version 5.3.8&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.HttpServletBean#init&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() &lt;span style="color:#66d9ef">throws&lt;/span> ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 子类实现,初始化web环境&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Let subclasses do whatever initialization they like.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initServletBean();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.FrameworkServlet#initServletBean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">initServletBean&lt;/span>() &lt;span style="color:#66d9ef">throws&lt;/span> ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 初始化spring上下文&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">webApplicationContext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> initWebApplicationContext();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 子类实现&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initFrameworkServlet();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.FrameworkServlet#initWebApplicationContext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> WebApplicationContext &lt;span style="color:#a6e22e">initWebApplicationContext&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebApplicationContext rootContext &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebApplicationContextUtils.&lt;span style="color:#a6e22e">getWebApplicationContext&lt;/span>(getServletContext());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebApplicationContext wac &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">webApplicationContext&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// A context instance was injected at construction time -&amp;gt; use it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wac &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">webApplicationContext&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (wac &lt;span style="color:#66d9ef">instanceof&lt;/span> ConfigurableWebApplicationContext) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConfigurableWebApplicationContext cwac &lt;span style="color:#f92672">=&lt;/span> (ConfigurableWebApplicationContext) wac;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>cwac.&lt;span style="color:#a6e22e">isActive&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The context has not yet been refreshed -&amp;gt; provide services such as&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// setting the parent context, setting the application context id, etc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (cwac.&lt;span style="color:#a6e22e">getParent&lt;/span>() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The context instance was injected without an explicit parent -&amp;gt; set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// the root application context (if any; may be null) as the parent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cwac.&lt;span style="color:#a6e22e">setParent&lt;/span>(rootContext);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//配置和刷新spring容器（重要）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//这个无非就是初始化spring ioc的环境，创建bean和实例化bean等操作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//这个方法最终也是调用refresh()方法，已在spring源码解析中解析过了&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configureAndRefreshWebApplicationContext(cwac);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (wac &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// No context instance was injected at construction time -&amp;gt; see if one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// has been registered in the servlet context. If one exists, it is assumed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// that the parent context (if any) has already been set and that the&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// user has performed any initialization such as setting the context id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wac &lt;span style="color:#f92672">=&lt;/span> findWebApplicationContext();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (wac &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// No context instance is defined for this servlet -&amp;gt; create a local one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wac &lt;span style="color:#f92672">=&lt;/span> createWebApplicationContext(rootContext);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">refreshEventReceived&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Either the context is not a ConfigurableApplicationContext with refresh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// support or the context injected at construction time had already been&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// refreshed -&amp;gt; trigger initial onRefresh manually here.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">synchronized&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">onRefreshMonitor&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 初始化DispatcherServlet的配置initStrategies()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onRefresh(wac);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">publishContext&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Publish the context as a servlet context attribute.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String attrName &lt;span style="color:#f92672">=&lt;/span> getServletContextAttributeName();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getServletContext().&lt;span style="color:#a6e22e">setAttribute&lt;/span>(attrName, wac);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> wac;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.DispatcherServlet#onRefresh &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">onRefresh&lt;/span>(ApplicationContext context) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// //初始化springmvc的配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initStrategies(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>总体流程:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>执行DispatcherServlet的init()方法，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>会执行父类的HttpServletBean的init()方法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后调用了FrameworkServlet的initServletBean()方法&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>没看懂,执行initWebApplicationContext()方法，就是对spring ioc环境的初始化。那么这里就衍生出了一个面试题：spring容器和spring mvc的容器的区别？通过源码的分析，spring和spring mvc底层，都是调用了同一个refresh()方法，所以spring容器和spring mvc容器是没有区别的，都是指的是同一个容器。&lt;/p>
&lt;p>（3）执行到onRefresh()方法，就是开始初始化DispatcherServlet了，也就是开始初始化spring mvc。&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.DispatcherServlet#initStrategies &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">initStrategies&lt;/span>(ApplicationContext context) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//上传文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initMultipartResolver(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//国际化&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initLocaleResolver(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//前段的主题样式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initThemeResolver(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//初始化HandlerMappings（请求映射器）重点&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initHandlerMappings(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 初始化HandlerAdapters（处理适配器）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initHandlerAdapters(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initHandlerExceptionResolvers(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initRequestToViewNameTranslator(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//视图转换器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initViewResolvers(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//重定向数据管理器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initFlashMapManager(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.DispatcherServlet#initHandlerMappings&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">initHandlerMappings&lt;/span>(ApplicationContext context) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Ensure we have at least one HandlerMapping, by registering&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// a default HandlerMapping if no other mappings are found.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过配置文件中的配置信息，得到handlerMappings&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerMappings&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerMappings&lt;/span> &lt;span style="color:#f92672">=&lt;/span> getDefaultStrategies(context, HandlerMapping.&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (logger.&lt;span style="color:#a6e22e">isTraceEnabled&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">trace&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;No HandlerMappings declared for servlet &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> getServletName() &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#39;: using default strategies from DispatcherServlet.properties&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.DispatcherServlet#getDefaultStrategies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String DEFAULT_STRATEGIES_PATH &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;DispatcherServlet.properties&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">getDefaultStrategies&lt;/span>(ApplicationContext context, Class&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> strategyInterface) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (defaultStrategies &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Load default strategy implementations from properties file.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// This is currently strictly internal and not meant to be customized&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// by application developers.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 从属性文件加载默认策略实现
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 说白了这里的意思就是从DEFAULT_STRATEGIES_PATH这个文件当中拿出所有的配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 可以去数一下一共有8个： DispatcherServlet.properties == DEFAULT_STRATEGIES_PATH
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ClassPathResource resource &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaultStrategies &lt;span style="color:#f92672">=&lt;/span> PropertiesLoaderUtils.&lt;span style="color:#a6e22e">loadProperties&lt;/span>(resource);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span> (IOException ex) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalStateException(&lt;span style="color:#e6db74">&amp;#34;Could not load &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> DEFAULT_STRATEGIES_PATH &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#39;: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> ex.&lt;span style="color:#a6e22e">getMessage&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String key &lt;span style="color:#f92672">=&lt;/span> strategyInterface.&lt;span style="color:#a6e22e">getName&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// defaultStrategies 是DispatcherServlet.properties 配置文件,在static静态代码块初始化&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 版本变了,不是从静态方法中获取到的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String value &lt;span style="color:#f92672">=&lt;/span> defaultStrategies.&lt;span style="color:#a6e22e">getProperty&lt;/span>(key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (value &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String&lt;span style="color:#f92672">[]&lt;/span> classNames &lt;span style="color:#f92672">=&lt;/span> StringUtils.&lt;span style="color:#a6e22e">commaDelimitedListToStringArray&lt;/span>(value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> strategies &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>(classNames.&lt;span style="color:#a6e22e">length&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (String className : classNames) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取class字节码文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Class&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> clazz &lt;span style="color:#f92672">=&lt;/span> ClassUtils.&lt;span style="color:#a6e22e">forName&lt;/span>(className, DispatcherServlet.&lt;span style="color:#a6e22e">class&lt;/span>.&lt;span style="color:#a6e22e">getClassLoader&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 底层是通过调用spring的getBean的方式创建该对象（可以进行bean的属性装配）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 请求映射就是在这个方法实现装配的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object strategy &lt;span style="color:#f92672">=&lt;/span> createDefaultStrategy(context, clazz);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strategies.&lt;span style="color:#a6e22e">add&lt;/span>((T) strategy);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span> (ClassNotFoundException ex) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> BeanInitializationException(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Could not find DispatcherServlet&amp;#39;s default strategy class [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> className &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;] for interface [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> key &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>, ex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span> (LinkageError err) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> BeanInitializationException(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Unresolvable class definition for DispatcherServlet&amp;#39;s default strategy class [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> className &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;] for interface [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> key &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>, err);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> strategies;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Collections.&lt;span style="color:#a6e22e">emptyList&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>DispatcherServlet.properties&lt;/p>
&lt;p>从DispatcherServlet.properties配置文件，可以看出handlerMapping默认是有两个：&lt;/p>
&lt;p>1.BeanNameUrlHandlerMapping （主要处理object）&lt;/p>
&lt;p>2.RequestMappingHandlerMapping（主要处理method）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Default implementation classes for DispatcherServlet&amp;#39;s strategy interfaces.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Used as fallback when no matching beans are found in the DispatcherServlet context.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Not meant to be customized by application developers.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">org.springframework.web.servlet.LocaleResolver&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">org.springframework.web.servlet.ThemeResolver&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">org.springframework.web.servlet.theme.FixedThemeResolver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">//&lt;/span> &lt;span style="color:#e6db74">HandlerMapping&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">org.springframework.web.servlet.HandlerMapping&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping,\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> org.springframework.web.servlet.function.support.RouterFunctionMapping&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">//&lt;/span> &lt;span style="color:#e6db74">HandlerAdapter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">org.springframework.web.servlet.HandlerAdapter&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter,\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> org.springframework.web.servlet.function.support.HandlerFunctionAdapter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">org.springframework.web.servlet.HandlerExceptionResolver&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver,\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">org.springframework.web.servlet.RequestToViewNameTranslator&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">org.springframework.web.servlet.ViewResolver&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">org.springframework.web.servlet.view.InternalResourceViewResolver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">org.springframework.web.servlet.FlashMapManager&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">org.springframework.web.servlet.support.SessionFlashMapManager&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(1) initHandlerMappings方法，就是初始化我们的handlerMapping（请求映射器）。&lt;/p>
&lt;p>(2) handlerMapping的主要作用是，找到请求路径对应的controller的方法。&lt;/p>
&lt;blockquote>
&lt;p>例如：请求的路径 &amp;ldquo;/index&amp;rdquo;，然后这个handlerMapping，在初始化的时候，已经将所有controller的请求路径映射保存在一个map集合，当请求过来的时候，就将&amp;quot;/index&amp;quot;作为一个key，从map集合中找到对应的controller的index方法。&lt;/p>&lt;/blockquote>
&lt;p>(3) 这里初始化handlerMappings ，默认是有两个handlerMappings ，是直接在defaultStrategies配置文件中获取。&lt;/p>
&lt;p>(4) 那么defaultStrategies的值是什么时候初始化的呢？&lt;/p>
&lt;blockquote>
&lt;p>通过查看源码，defaultStrategies这个值，是DispatcherServlet类的静态代码块初始化的。 全世界都知道，当一个类被初始化的时候，会执行该类的static静态代码块的。&lt;/p>&lt;/blockquote>
&lt;h2 id="请求阶段分析">请求阶段分析&lt;/h2>
&lt;p>用户的一个请求过来，会由servlet接收到，然后一步一步调用到DispatcherServlet的doService方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.DispatcherServlet#doService&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">doService&lt;/span>(HttpServletRequest request, HttpServletResponse response) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 核心方法（重点）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> doDispatch(request, response);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.DispatcherServlet#doDispatch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">doDispatch&lt;/span>(HttpServletRequest request, HttpServletResponse response) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpServletRequest processedRequest &lt;span style="color:#f92672">=&lt;/span> request;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HandlerExecutionChain mappedHandler &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">boolean&lt;/span> multipartRequestParsed &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 异步编程&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebAsyncManager asyncManager &lt;span style="color:#f92672">=&lt;/span> WebAsyncUtils.&lt;span style="color:#a6e22e">getAsyncManager&lt;/span>(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 定义变量,哈哈哈,好熟悉呀&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ModelAndView mv &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Exception dispatchException &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//检查请求中是否有文件上传操作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> processedRequest &lt;span style="color:#f92672">=&lt;/span> checkMultipart(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> multipartRequestParsed &lt;span style="color:#f92672">=&lt;/span> (processedRequest &lt;span style="color:#f92672">!=&lt;/span> request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Determine handler for the current request.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 确定当前请求的处理程序（重点），推断controller和handler的类型，&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 进到这里的getHandler方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappedHandler &lt;span style="color:#f92672">=&lt;/span> getHandler(processedRequest);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (mappedHandler &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> noHandlerFound(processedRequest, response);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Determine handler adapter for the current request.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//推断适配器，不同的controller类型，交给不同的适配器去处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//如果是一个bean，mappedHandler.getHandler()返回的是一个对象&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//如果是一个method，mappedHandler.getHandler()返回的是一个方法 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HandlerAdapter ha &lt;span style="color:#f92672">=&lt;/span> getHandlerAdapter(mappedHandler.&lt;span style="color:#a6e22e">getHandler&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//到这里，spring才确定我要怎么反射调用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Process last-modified header, if supported by the handler.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String method &lt;span style="color:#f92672">=&lt;/span> request.&lt;span style="color:#a6e22e">getMethod&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">boolean&lt;/span> isGet &lt;span style="color:#f92672">=&lt;/span> HttpMethod.&lt;span style="color:#a6e22e">GET&lt;/span>.&lt;span style="color:#a6e22e">matches&lt;/span>(method);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (isGet &lt;span style="color:#f92672">||&lt;/span> HttpMethod.&lt;span style="color:#a6e22e">HEAD&lt;/span>.&lt;span style="color:#a6e22e">matches&lt;/span>(method)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> lastModified &lt;span style="color:#f92672">=&lt;/span> ha.&lt;span style="color:#a6e22e">getLastModified&lt;/span>(request, mappedHandler.&lt;span style="color:#a6e22e">getHandler&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">new&lt;/span> ServletWebRequest(request, response).&lt;span style="color:#a6e22e">checkNotModified&lt;/span>(lastModified) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> isGet) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 前置拦截器处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>mappedHandler.&lt;span style="color:#a6e22e">applyPreHandle&lt;/span>(processedRequest, response)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//通过适配器，处理请求（可以理解为，反射调用方法）（重点）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Actually invoke the handler.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mv &lt;span style="color:#f92672">=&lt;/span> ha.&lt;span style="color:#a6e22e">handle&lt;/span>(processedRequest, response, mappedHandler.&lt;span style="color:#a6e22e">getHandler&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (asyncManager.&lt;span style="color:#a6e22e">isConcurrentHandlingStarted&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> applyDefaultViewName(processedRequest, mv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappedHandler.&lt;span style="color:#a6e22e">applyPostHandle&lt;/span>(processedRequest, response, mv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span> (Exception ex) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatchException &lt;span style="color:#f92672">=&lt;/span> ex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span> (Throwable err) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// As of 4.3, we&amp;#39;re processing Errors thrown from handler methods as well,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// making them available for @ExceptionHandler methods and other scenarios.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatchException &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NestedServletException(&lt;span style="color:#e6db74">&amp;#34;Handler dispatch failed&amp;#34;&lt;/span>, err);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span> (Exception ex) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> triggerAfterCompletion(processedRequest, response, mappedHandler, ex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span> (Throwable err) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> triggerAfterCompletion(processedRequest, response, mappedHandler,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> NestedServletException(&lt;span style="color:#e6db74">&amp;#34;Handler processing failed&amp;#34;&lt;/span>, err));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过对DispatcherServlet的分析，得到请求的核心处理方法是doDispatch()，&lt;/p>
&lt;p>主要是分了几步：&lt;/p>
&lt;p>(1) 检查请求中是否有文件上传操作&lt;/p>
&lt;p>(2) 确定当前请求的处理的handler（重点）&lt;/p>
&lt;p>(3) 推断适配器，不同的controller类型，交给不同的适配器去处理&lt;/p>
&lt;p>(4) 执行前置拦截器处理interceptor&lt;/p>
&lt;p>(5) 通过找到的HandlerAdapter ，反射执行相关的业务代码controller的方法。&lt;/p>
&lt;p>(6) 返回结果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.DispatcherServlet#getHandler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Nullable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> HandlerExecutionChain &lt;span style="color:#a6e22e">getHandler&lt;/span>(HttpServletRequest request) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerMappings&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//循环所有的HandlerMappings&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//this.handlerMappings这个是什么时候初始化的？（重点）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//在handlerMappings初始化的时候&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (HandlerMapping mapping : &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerMappings&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//把请求传过去看能不能得到一个handler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//注意：怎么得到handler和handlerMapping自己实现的逻辑有关系&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HandlerExecutionChain handler &lt;span style="color:#f92672">=&lt;/span> mapping.&lt;span style="color:#a6e22e">getHandler&lt;/span>(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.handler.AbstractHandlerMapping#getHandler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Nullable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> HandlerExecutionChain &lt;span style="color:#a6e22e">getHandler&lt;/span>(HttpServletRequest request) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取handler（重点）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object handler &lt;span style="color:#f92672">=&lt;/span> getHandlerInternal(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">=&lt;/span> getDefaultHandler();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Bean name or resolved handler?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#66d9ef">instanceof&lt;/span> String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String handlerName &lt;span style="color:#f92672">=&lt;/span> (String) handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">=&lt;/span> obtainApplicationContext().&lt;span style="color:#a6e22e">getBean&lt;/span>(handlerName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Ensure presence of cached lookupPath for interceptors and others&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>ServletRequestPathUtils.&lt;span style="color:#a6e22e">hasCachedPath&lt;/span>(request)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initLookupPath(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HandlerExecutionChain executionChain &lt;span style="color:#f92672">=&lt;/span> getHandlerExecutionChain(handler, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (logger.&lt;span style="color:#a6e22e">isTraceEnabled&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">trace&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Mapped to &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> handler);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (logger.&lt;span style="color:#a6e22e">isDebugEnabled&lt;/span>() &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>DispatcherType.&lt;span style="color:#a6e22e">ASYNC&lt;/span>.&lt;span style="color:#a6e22e">equals&lt;/span>(request.&lt;span style="color:#a6e22e">getDispatcherType&lt;/span>())) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Mapped to &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> executionChain.&lt;span style="color:#a6e22e">getHandler&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (hasCorsConfigurationSource(handler) &lt;span style="color:#f92672">||&lt;/span> CorsUtils.&lt;span style="color:#a6e22e">isPreFlightRequest&lt;/span>(request)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CorsConfiguration config &lt;span style="color:#f92672">=&lt;/span> getCorsConfiguration(handler, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (getCorsConfigurationSource() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CorsConfiguration globalConfig &lt;span style="color:#f92672">=&lt;/span> getCorsConfigurationSource().&lt;span style="color:#a6e22e">getCorsConfiguration&lt;/span>(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config &lt;span style="color:#f92672">=&lt;/span> (globalConfig &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> globalConfig.&lt;span style="color:#a6e22e">combine&lt;/span>(config) : config);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (config &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config.&lt;span style="color:#a6e22e">validateAllowCredentials&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> executionChain &lt;span style="color:#f92672">=&lt;/span> getCorsHandlerExecutionChain(request, executionChain, config);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> executionChain;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(1) getHandler()方法，主要是遍历在DispatcherServlet初始化是，初始化的handlerMappings。&lt;/p>
&lt;p>(2) 这个方法的主要思想是，通过request的路径，去匹配对应的controller去处理。&lt;/p>
&lt;p>(3) SpringMVC自己自带了2个HandlerMapping 来供我们选择 至于 为什么要有2个呢？&lt;/p>
&lt;h3 id="两种注册controller的方式">两种注册Controller的方式&lt;/h3>
&lt;p>我们用2种方式来注册Controller 分别是：&lt;/p>
&lt;p>(1) 作为Bean的形式：实现Controller接口，重写handleRequest方法，请求路径为&amp;quot;/test&amp;quot;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TesrController&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> org.&lt;span style="color:#a6e22e">springframework&lt;/span>.&lt;span style="color:#a6e22e">web&lt;/span>.&lt;span style="color:#a6e22e">servlet&lt;/span>.&lt;span style="color:#a6e22e">mvc&lt;/span>.&lt;span style="color:#a6e22e">Controller&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ModelAndView &lt;span style="color:#a6e22e">handleRequest&lt;/span>(HttpServletRequest request,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpServletResponse response) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(2) 以Annotation形式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AnnotationController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@RequestMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test2&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Object &lt;span style="color:#a6e22e">test&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>经过测试:&lt;/p>
&lt;p>(1)可以得到以Bean方式的controller，是通过BeanNameUrlHandlerMapping去匹配&lt;/p>
&lt;p>(2)以注解方法的controller，是通过RequestMappingHandlerMapping去匹配&lt;/p>
&lt;h4 id="beannameurlhandlermapping">BeanNameUrlHandlerMapping&lt;/h4>
&lt;p>BeanNameUrlHandlerMapping处理bean方式的源码分析：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#getHandlerInternal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Nullable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> Object &lt;span style="color:#a6e22e">getHandlerInternal&lt;/span>(HttpServletRequest request) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取请求的路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String lookupPath &lt;span style="color:#f92672">=&lt;/span> initLookupPath(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 到对应的handler（重点）调用 lookupHandler()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (usesPathPatterns()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestPath path &lt;span style="color:#f92672">=&lt;/span> ServletRequestPathUtils.&lt;span style="color:#a6e22e">getParsedRequestPath&lt;/span>(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">=&lt;/span> lookupHandler(path, lookupPath, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">=&lt;/span> lookupHandler(lookupPath, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We need to care for the default handler directly, since we need to&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// expose the PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE for it as well.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object rawHandler &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (StringUtils.&lt;span style="color:#a6e22e">matchesCharacter&lt;/span>(lookupPath, &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rawHandler &lt;span style="color:#f92672">=&lt;/span> getRootHandler();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (rawHandler &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rawHandler &lt;span style="color:#f92672">=&lt;/span> getDefaultHandler();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (rawHandler &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Bean name or resolved handler?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (rawHandler &lt;span style="color:#66d9ef">instanceof&lt;/span> String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String handlerName &lt;span style="color:#f92672">=&lt;/span> (String) rawHandler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rawHandler &lt;span style="color:#f92672">=&lt;/span> obtainApplicationContext().&lt;span style="color:#a6e22e">getBean&lt;/span>(handlerName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> validateHandler(rawHandler, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">=&lt;/span> buildPathExposingHandler(rawHandler, lookupPath, lookupPath, &lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#lookupHandler(java.lang.String, javax.servlet.http.HttpServletRequest)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Nullable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> Object &lt;span style="color:#a6e22e">lookupHandler&lt;/span>(String lookupPath, HttpServletRequest request) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 查看这里的方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object handler &lt;span style="color:#f92672">=&lt;/span> getDirectMatch(lookupPath, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Pattern match?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> matchingPatterns &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (String registeredPattern : &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerMap&lt;/span>.&lt;span style="color:#a6e22e">keySet&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (getPathMatcher().&lt;span style="color:#a6e22e">match&lt;/span>(registeredPattern, lookupPath)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchingPatterns.&lt;span style="color:#a6e22e">add&lt;/span>(registeredPattern);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (useTrailingSlashMatch()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>registeredPattern.&lt;span style="color:#a6e22e">endsWith&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> getPathMatcher().&lt;span style="color:#a6e22e">match&lt;/span>(registeredPattern &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, lookupPath)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchingPatterns.&lt;span style="color:#a6e22e">add&lt;/span>(registeredPattern &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String bestMatch &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Comparator&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> patternComparator &lt;span style="color:#f92672">=&lt;/span> getPathMatcher().&lt;span style="color:#a6e22e">getPatternComparator&lt;/span>(lookupPath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>matchingPatterns.&lt;span style="color:#a6e22e">isEmpty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchingPatterns.&lt;span style="color:#a6e22e">sort&lt;/span>(patternComparator);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (logger.&lt;span style="color:#a6e22e">isTraceEnabled&lt;/span>() &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> matchingPatterns.&lt;span style="color:#a6e22e">size&lt;/span>() &lt;span style="color:#f92672">&amp;gt;&lt;/span> 1) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">trace&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Matching patterns &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> matchingPatterns);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bestMatch &lt;span style="color:#f92672">=&lt;/span> matchingPatterns.&lt;span style="color:#a6e22e">get&lt;/span>(0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (bestMatch &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerMap&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(bestMatch);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (bestMatch.&lt;span style="color:#a6e22e">endsWith&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerMap&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(bestMatch.&lt;span style="color:#a6e22e">substring&lt;/span>(0, bestMatch.&lt;span style="color:#a6e22e">length&lt;/span>() &lt;span style="color:#f92672">-&lt;/span> 1));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalStateException(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Could not find handler for best pattern match [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> bestMatch &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Bean name or resolved handler?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#66d9ef">instanceof&lt;/span> String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String handlerName &lt;span style="color:#f92672">=&lt;/span> (String) handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">=&lt;/span> obtainApplicationContext().&lt;span style="color:#a6e22e">getBean&lt;/span>(handlerName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> validateHandler(handler, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String pathWithinMapping &lt;span style="color:#f92672">=&lt;/span> getPathMatcher().&lt;span style="color:#a6e22e">extractPathWithinPattern&lt;/span>(bestMatch, lookupPath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// There might be multiple &amp;#39;best patterns&amp;#39;, let&amp;#39;s make sure we have the correct URI template variables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// for all of them&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, String&lt;span style="color:#f92672">&amp;gt;&lt;/span> uriTemplateVariables &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> LinkedHashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (String matchingPattern : matchingPatterns) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (patternComparator.&lt;span style="color:#a6e22e">compare&lt;/span>(bestMatch, matchingPattern) &lt;span style="color:#f92672">==&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, String&lt;span style="color:#f92672">&amp;gt;&lt;/span> vars &lt;span style="color:#f92672">=&lt;/span> getPathMatcher().&lt;span style="color:#a6e22e">extractUriTemplateVariables&lt;/span>(matchingPattern, lookupPath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, String&lt;span style="color:#f92672">&amp;gt;&lt;/span> decodedVars &lt;span style="color:#f92672">=&lt;/span> getUrlPathHelper().&lt;span style="color:#a6e22e">decodePathVariables&lt;/span>(request, vars);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uriTemplateVariables.&lt;span style="color:#a6e22e">putAll&lt;/span>(decodedVars);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (logger.&lt;span style="color:#a6e22e">isTraceEnabled&lt;/span>() &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> uriTemplateVariables.&lt;span style="color:#a6e22e">size&lt;/span>() &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">trace&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;URI variables &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> uriTemplateVariables);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// No handler found...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#getDirectMatch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Nullable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Object &lt;span style="color:#a6e22e">getDirectMatch&lt;/span>(String urlPath, HttpServletRequest request) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过请求的路径，在handlerMap中去匹配。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// handlerMap这个值，什么时候填充值？在init初始化的时候，就已经存放在这个handlerMap种&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object handler &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerMap&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(urlPath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Bean name or resolved handler?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (handler &lt;span style="color:#66d9ef">instanceof&lt;/span> String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String handlerName &lt;span style="color:#f92672">=&lt;/span> (String) handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">=&lt;/span> obtainApplicationContext().&lt;span style="color:#a6e22e">getBean&lt;/span>(handlerName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> validateHandler(handler, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> buildPathExposingHandler(handler, urlPath, urlPath, &lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(1) 以Bean方式的controller，匹配请求的路径，是通过一个handlerMap去匹配，比较简单。&lt;/p>
&lt;p>(2) 这里的问题是，这个handlerMap的值，是什么时候放进去的？&lt;/p>
&lt;blockquote>
&lt;p>通过源码分析，BeanNameUrlHandlerMapping是实现了ApplicationContextAware接口。 如果你精通spring的源码，就知道spring的实例bean的时候，会回调这些类的setApplicationContext()方法。&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.context.support.ApplicationObjectSupport#setApplicationContext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setApplicationContext&lt;/span>(&lt;span style="color:#a6e22e">@Nullable&lt;/span> ApplicationContext context) &lt;span style="color:#66d9ef">throws&lt;/span> BeansException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (context &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>isContextRequired()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Reset internal context state.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">applicationContext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">messageSourceAccessor&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">applicationContext&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Initialize with passed-in context.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>requiredContextClass().&lt;span style="color:#a6e22e">isInstance&lt;/span>(context)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ApplicationContextException(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Invalid application context: needs to be of type [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> requiredContextClass().&lt;span style="color:#a6e22e">getName&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">applicationContext&lt;/span> &lt;span style="color:#f92672">=&lt;/span> context;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">messageSourceAccessor&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> MessageSourceAccessor(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 初始化ApplicationContext，就会执行到子类的方法（重点）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initApplicationContext(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Ignore reinitialization if same context passed in.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">applicationContext&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> context) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ApplicationContextException(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Cannot reinitialize with different application context: current one is [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">applicationContext&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;], passed-in one is [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> context &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;]&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 没看懂怎么走到这里来呢&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping#initApplicationContext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">initApplicationContext&lt;/span>() &lt;span style="color:#66d9ef">throws&lt;/span> ApplicationContextException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">initApplicationContext&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 检测出handler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> detectHandlers();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.handler.AbstractDetectingUrlHandlerMapping#detectHandlers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">detectHandlers&lt;/span>() &lt;span style="color:#66d9ef">throws&lt;/span> BeansException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取spring ioc所有的beanName，然后判断beanName，那些是以 &amp;#34;/&amp;#34; 开头&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ApplicationContext applicationContext &lt;span style="color:#f92672">=&lt;/span> obtainApplicationContext();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String&lt;span style="color:#f92672">[]&lt;/span> beanNames &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">detectHandlersInAncestorContexts&lt;/span> &lt;span style="color:#f92672">?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BeanFactoryUtils.&lt;span style="color:#a6e22e">beanNamesForTypeIncludingAncestors&lt;/span>(applicationContext, Object.&lt;span style="color:#a6e22e">class&lt;/span>) :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> applicationContext.&lt;span style="color:#a6e22e">getBeanNamesForType&lt;/span>(Object.&lt;span style="color:#a6e22e">class&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Take any bean name that we can determine URLs for.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (String beanName : beanNames) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 然后判断beanName，那些是以 &amp;#34;/&amp;#34; 开头&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String&lt;span style="color:#f92672">[]&lt;/span> urls &lt;span style="color:#f92672">=&lt;/span> determineUrlsForHandler(beanName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>ObjectUtils.&lt;span style="color:#a6e22e">isEmpty&lt;/span>(urls)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 注册handler（重点）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// URL paths found: Let&amp;#39;s consider it a handler.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> registerHandler(urls, beanName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#registerHandler(java.lang.String[], java.lang.String) &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">registerHandler&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> urlPaths, String beanName) &lt;span style="color:#66d9ef">throws&lt;/span> BeansException, IllegalStateException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.&lt;span style="color:#a6e22e">notNull&lt;/span>(urlPaths, &lt;span style="color:#e6db74">&amp;#34;URL path array must not be null&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (String urlPath : urlPaths) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> registerHandler(urlPath, beanName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.handler.AbstractUrlHandlerMapping#registerHandler(java.lang.String, java.lang.Object)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">registerHandler&lt;/span>(String urlPath, Object handler) &lt;span style="color:#66d9ef">throws&lt;/span> BeansException, IllegalStateException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.&lt;span style="color:#a6e22e">notNull&lt;/span>(urlPath, &lt;span style="color:#e6db74">&amp;#34;URL path must not be null&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.&lt;span style="color:#a6e22e">notNull&lt;/span>(handler, &lt;span style="color:#e6db74">&amp;#34;Handler object must not be null&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object resolvedHandler &lt;span style="color:#f92672">=&lt;/span> handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Eagerly resolve handler if referencing singleton via name.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">lazyInitHandlers&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> handler &lt;span style="color:#66d9ef">instanceof&lt;/span> String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String handlerName &lt;span style="color:#f92672">=&lt;/span> (String) handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ApplicationContext applicationContext &lt;span style="color:#f92672">=&lt;/span> obtainApplicationContext();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (applicationContext.&lt;span style="color:#a6e22e">isSingleton&lt;/span>(handlerName)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resolvedHandler &lt;span style="color:#f92672">=&lt;/span> applicationContext.&lt;span style="color:#a6e22e">getBean&lt;/span>(handlerName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object mappedHandler &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerMap&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(urlPath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (mappedHandler &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (mappedHandler &lt;span style="color:#f92672">!=&lt;/span> resolvedHandler) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalStateException(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Cannot map &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> getHandlerDescription(handler) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; to URL path [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> urlPath &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;]: There is already &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> getHandlerDescription(mappedHandler) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; mapped.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (urlPath.&lt;span style="color:#a6e22e">equals&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (logger.&lt;span style="color:#a6e22e">isTraceEnabled&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">trace&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Root mapping to &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> getHandlerDescription(handler));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setRootHandler(resolvedHandler);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (urlPath.&lt;span style="color:#a6e22e">equals&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/*&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (logger.&lt;span style="color:#a6e22e">isTraceEnabled&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">trace&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Default mapping to &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> getHandlerDescription(handler));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setDefaultHandler(resolvedHandler);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 最终put到map集合中（省略其他无关代码）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerMap&lt;/span>.&lt;span style="color:#a6e22e">put&lt;/span>(urlPath, resolvedHandler);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (getPatternParser() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">pathPatternHandlerMap&lt;/span>.&lt;span style="color:#a6e22e">put&lt;/span>(getPatternParser().&lt;span style="color:#a6e22e">parse&lt;/span>(urlPath), resolvedHandler);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (logger.&lt;span style="color:#a6e22e">isTraceEnabled&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">trace&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Mapped [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> urlPath &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;] onto &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> getHandlerDescription(handler));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>BeanNameUrlHandlerMapping处理bean方式的源码分析，其实是很简单：&lt;/p>
&lt;p>(1) 在类初始化的时候，就已经将所有实现了Controller接口的controller类，拿到他们的@Componet(&amp;rsquo;/test')&lt;/p>
&lt;p>(2) 然后将&amp;rsquo;/test&amp;rsquo;这个作为key，controller类作为value，放入到一个map集合。&lt;/p>
&lt;p>(3) 当一个请求过来的时候，拿到这个请求的uri，在map里面找，找到了即表示匹配上&lt;/p>&lt;/blockquote>
&lt;h4 id="requestmappinghandlermapping">RequestMappingHandlerMapping&lt;/h4>
&lt;p>处理注解方式的源码分析：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerInternal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 对于RequestMappingHandlerMapping，indexController.index()，方法的请求路径映射&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Nullable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> HandlerMethod &lt;span style="color:#a6e22e">getHandlerInternal&lt;/span>(HttpServletRequest request) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 获取请求路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String lookupPath &lt;span style="color:#f92672">=&lt;/span> initLookupPath(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">mappingRegistry&lt;/span>.&lt;span style="color:#a6e22e">acquireReadLock&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 通过请求路径，获取handler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HandlerMethod handlerMethod &lt;span style="color:#f92672">=&lt;/span> lookupHandlerMethod(lookupPath, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (handlerMethod &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> handlerMethod.&lt;span style="color:#a6e22e">createWithResolvedBean&lt;/span>() : &lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">mappingRegistry&lt;/span>.&lt;span style="color:#a6e22e">releaseReadLock&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#lookupHandlerMethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Nullable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> HandlerMethod &lt;span style="color:#a6e22e">lookupHandlerMethod&lt;/span>(String lookupPath, HttpServletRequest request) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Match&lt;span style="color:#f92672">&amp;gt;&lt;/span> matches &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 从mappingRegistry的urlLookup，匹配请求路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> directPathMatches &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">mappingRegistry&lt;/span>.&lt;span style="color:#a6e22e">getMappingsByDirectPath&lt;/span>(lookupPath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (directPathMatches &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> addMatchingMappings(directPathMatches, matches, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (matches.&lt;span style="color:#a6e22e">isEmpty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> addMatchingMappings(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">mappingRegistry&lt;/span>.&lt;span style="color:#a6e22e">getRegistrations&lt;/span>().&lt;span style="color:#a6e22e">keySet&lt;/span>(), matches, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>matches.&lt;span style="color:#a6e22e">isEmpty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Match bestMatch &lt;span style="color:#f92672">=&lt;/span> matches.&lt;span style="color:#a6e22e">get&lt;/span>(0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (matches.&lt;span style="color:#a6e22e">size&lt;/span>() &lt;span style="color:#f92672">&amp;gt;&lt;/span> 1) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Comparator&lt;span style="color:#f92672">&amp;lt;&lt;/span>Match&lt;span style="color:#f92672">&amp;gt;&lt;/span> comparator &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> MatchComparator(getMappingComparator(request));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matches.&lt;span style="color:#a6e22e">sort&lt;/span>(comparator);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bestMatch &lt;span style="color:#f92672">=&lt;/span> matches.&lt;span style="color:#a6e22e">get&lt;/span>(0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (logger.&lt;span style="color:#a6e22e">isTraceEnabled&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">trace&lt;/span>(matches.&lt;span style="color:#a6e22e">size&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; matching mappings: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> matches);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (CorsUtils.&lt;span style="color:#a6e22e">isPreFlightRequest&lt;/span>(request)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (Match match : matches) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (match.&lt;span style="color:#a6e22e">hasCorsConfig&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> PREFLIGHT_AMBIGUOUS_MATCH;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Match secondBestMatch &lt;span style="color:#f92672">=&lt;/span> matches.&lt;span style="color:#a6e22e">get&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (comparator.&lt;span style="color:#a6e22e">compare&lt;/span>(bestMatch, secondBestMatch) &lt;span style="color:#f92672">==&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Method m1 &lt;span style="color:#f92672">=&lt;/span> bestMatch.&lt;span style="color:#a6e22e">getHandlerMethod&lt;/span>().&lt;span style="color:#a6e22e">getMethod&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Method m2 &lt;span style="color:#f92672">=&lt;/span> secondBestMatch.&lt;span style="color:#a6e22e">getHandlerMethod&lt;/span>().&lt;span style="color:#a6e22e">getMethod&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String uri &lt;span style="color:#f92672">=&lt;/span> request.&lt;span style="color:#a6e22e">getRequestURI&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalStateException(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Ambiguous handler methods mapped for &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> uri &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#39;: {&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> m1 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> m2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request.&lt;span style="color:#a6e22e">setAttribute&lt;/span>(BEST_MATCHING_HANDLER_ATTRIBUTE, bestMatch.&lt;span style="color:#a6e22e">getHandlerMethod&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handleMatch(bestMatch.&lt;span style="color:#a6e22e">mapping&lt;/span>, lookupPath, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 返回handler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> bestMatch.&lt;span style="color:#a6e22e">getHandlerMethod&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> handleNoMatch(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">mappingRegistry&lt;/span>.&lt;span style="color:#a6e22e">getRegistrations&lt;/span>().&lt;span style="color:#a6e22e">keySet&lt;/span>(), lookupPath, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 3.AbstractHandlerMethodMapping.MappingRegistry#getMappingsByDirectPath&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Nullable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">getMappingsByDirectPath&lt;/span>(String urlPath) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">pathLookup&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(urlPath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>RequestMappingHandlerMapping处理注解方式的源码分析，比较复杂，用一个MappingRegistry维护所有的请求路径映射。&lt;/p>
&lt;p>MappingRegistry的初始化，也是在该bean实例化的时候，就已经做好的了。&lt;/p>
&lt;p>原理也是和上一个差不多，都是从一个map集合里面匹配。所以这里就不再做解析了&lt;/p>
&lt;blockquote>
&lt;p>总结：getHandler()&lt;/p>&lt;/blockquote>
&lt;p>找适配器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// org.springframework.web.servlet.DispatcherServlet#getHandlerAdapter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> HandlerAdapter &lt;span style="color:#a6e22e">getHandlerAdapter&lt;/span>(Object handler) &lt;span style="color:#66d9ef">throws&lt;/span> ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerAdapters&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (HandlerAdapter adapter : &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handlerAdapters&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (adapter.&lt;span style="color:#a6e22e">supports&lt;/span>(handler)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> adapter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ServletException(&lt;span style="color:#e6db74">&amp;#34;No adapter for handler [&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> handler &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>其实能看见他是从一个handlerAdapters属性里面遍历了我们的适配器 这个handlerAdapters哪来的呢？&lt;/p>
&lt;p>跟我们的HandlerMappings一样 在他的配置文件里面有写，就是我们刚刚所说的 。&lt;/p>
&lt;p>至于什么是适配器，我们结合Handler来讲， 就如我们在最开始的总结时所说的， 一开始只是找到了Handler 现在要执行了，但是有个问题，Handler不止一个， 自然而然对应的执行方式就不同了， 这时候适配器的概念就出来了：对应不同的Handler的执行方案。当找到合适的适配器的时候， 基本上就已经收尾了，因为后面在做了一些判断之后（判断请求类型之类的），就开始执行了你的Handler了，上代码：&lt;/p>
&lt;p>&lt;code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());&lt;/code>&lt;/p>
&lt;p>这个mv就是我们的ModlAndView 其实执行完这一行 我们的Controller的逻辑已经执行完了， 剩下的就是寻找视图 渲染图的事情了。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>总结： 其实我们的SpringMVC关键的概念就在于Handler（处理器） 和Adapter(适配器) 通过一个关键的HandlerMappings 找到合适处理你的Controller的Handler 然后再通过HandlerAdapters找到一个合适的HandlerAdapter 来执行Handler即Controller里面的逻辑。 最后再返回ModlAndView&amp;hellip;&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>参考:https://juejin.cn/post/6991290858880368676&lt;/p>&lt;/blockquote>
&lt;h1 id="spring">Spring&lt;/h1>
&lt;h2 id="事务的传播">事务的传播&lt;/h2>
&lt;blockquote>
&lt;p>参考:https://segmentfault.com/a/1190000013341344&lt;/p>&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>传播等级&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>理解&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>REQUIRED&lt;/td>
&lt;td>默认的事务传播级别&lt;br />表示如果当前存在事务，则加入该事务；&lt;br />如果当前没有事务，则创建一个新的事务。&lt;/td>
&lt;td>A有事务,B就跟着用&lt;br />A没有事务,B就开启自己的事务,只B方法用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SUPPORTS&lt;/td>
&lt;td>如果当前存在事务，则加入该事务；&lt;br />如果当前没有事务，则以非事务的方式继续运行。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MANDATORY&lt;/td>
&lt;td>如果当前存在事务，则加入该事务；&lt;br />如果当前没有事务，则抛出异常。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>REQUIRES_NEW&lt;/td>
&lt;td>表示创建一个新的事务&lt;br />如果当前存在事务，则把当前事务挂起。&lt;br />也就是说不管外部方法是否开启事务，Propagation.REQUIRES_NEW 修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NOT_SUPPORTED&lt;/td>
&lt;td>以非事务方式运行，&lt;br />如果当前存在事务，则把当前事务挂起。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NEVER&lt;/td>
&lt;td>以非事务方式运行，&lt;br />如果当前存在事务，则抛出异常。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NESTED&lt;/td>
&lt;td>如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；&lt;br />如果当前没有事务，则该取值等价于REQUIRED。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>默认数据是anthony和0&lt;/p>
&lt;p>&lt;strong>REQUIRED&lt;/strong>&lt;/p>
&lt;p>A方法&lt;code>有&lt;/code>事务,A方法报错,有一个报错都会回滚,结果是:anthony和0&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">REQUIRED&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A方法&lt;code>没有&lt;/code>事务,A方法有报错,结果是:anthony2和1&lt;/p>
&lt;p>B方法自己开启事务,就不管A事务了,所以A方法,就算报错了,也成功写入数据库,B事务没有报错,也成功写入数据库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">REQUIRED&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A方法没有事务,A方法和B方法都报错,,结果是:anthony2和0&lt;/p>
&lt;p>A方法没有事务,所以A方法插入数据库成功,就算报错,也没有回滚&lt;/p>
&lt;p>B方法自己开始事务,B方法报错,所以回滚&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">REQUIRED&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>SUPPORTS&lt;/strong>&lt;/p>
&lt;p>A方法有事务,A方法报错,都回滚,,结果是:anthony和0&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">SUPPORTS&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A没有事务,,A方法报错,都没有回滚,结果是:anthony2和1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">SUPPORTS&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A没有事务,,A,B方法都报错,都没有回滚,结果是:anthony2和1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">SUPPORTS&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>MANDATORY&lt;/strong>&lt;/p>
&lt;p>A有事务,A报错,都回滚,结果是:anthony和0&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">MANDATORY&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A没有事务,运行报错了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">MANDATORY&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>REQUIRES_NEW&lt;/strong>&lt;/p>
&lt;p>测试的时候,不要操作同一条数据,容易超时&amp;hellip;..&lt;/p>
&lt;p>A开始事务,B也开始事务,B报错了,B回滚,A插入成功&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">REQUIRES_NEW&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样没有复现出问题&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">REQUIRES_NEW&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>A没有事务,B有事务&lt;/li>
&lt;li>A报错,没有回滚,
B插入数据成功&lt;/li>
&lt;li>&lt;code>外围方法异常,不影响内部调用的方法&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">REQUIRES_NEW&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>A没有事务,B有事务&lt;/li>
&lt;li>A插入数据成功,B回滚&lt;/li>
&lt;li>&lt;code>内部调用的方法,不影响外围的方法成功插入&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">REQUIRES_NEW&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>NOT_SUPPORTED&lt;/strong>&lt;/p>
&lt;p>A有事务,B也有事务,A回滚了,B报错了,没有回滚&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">NOT_SUPPORTED&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A有事务,B也有事务,A回滚了,B没有回滚&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">NOT_SUPPORTED&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>NEVER&lt;/strong>&lt;/p>
&lt;p>直接报错&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">NEVER&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>NESTED&lt;/strong>&lt;/p>
&lt;p>全部提交成功&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">NESTED&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>全部失败&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">NESTED&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A没有事务,B有事务&lt;/p>
&lt;p>A执行成功,B回滚成功&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodA&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setUsername&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactionalController.&lt;span style="color:#a6e22e">methodB&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Transactional&lt;/span>(propagation&lt;span style="color:#f92672">=&lt;/span> Propagation.&lt;span style="color:#a6e22e">NESTED&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodB&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test byId &lt;span style="color:#f92672">=&lt;/span> testService.&lt;span style="color:#a6e22e">getById&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">setParentId&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byId.&lt;span style="color:#a6e22e">updateById&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1 &lt;span style="color:#f92672">/&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="拦截器和过滤器">拦截器和过滤器&lt;/h1>
&lt;p>1、过滤器和拦截器&lt;strong>触发时机不一样&lt;/strong>，先拦截器,后过滤器&lt;/p>
&lt;p>2、&lt;strong>拦截器&lt;/strong>可以获取IOC容器中的各个bean，而过滤器就不行，因为拦&lt;strong>截器是spring提供并管理的&lt;/strong>，spring的功能可以被拦截器使用，在拦截器里注入一个service，可以调用业务逻辑。而过滤器是JavaEE标准，只需依赖servlet api ，不需要依赖spring。&lt;/p>
&lt;p>3、&lt;strong>过滤器的实现&lt;/strong>基于&lt;strong>回调函数&lt;/strong>。而&lt;strong>拦截器&lt;/strong>（代理模式）的实现&lt;strong>基于反射&lt;/strong>&lt;/p>
&lt;p>4、&lt;strong>过滤器&lt;/strong>是依&lt;strong>赖于Servlet容&lt;/strong>器，&lt;strong>属于Servlet规范的一部分&lt;/strong>，而&lt;strong>拦截器则是独立存&lt;/strong>在的，可以在任何情况下使用。&lt;/p>
&lt;p>5、&lt;strong>Filte&lt;/strong>r的执行由&lt;strong>Servlet容器回调完成&lt;/strong>，而&lt;strong>拦截器&lt;/strong>通常通**过动态代理（反射）**的方式来执行。&lt;/p>
&lt;p>6、&lt;strong>Filter的生命周&lt;/strong>期&lt;strong>由Servlet容器管理&lt;/strong>，而&lt;strong>拦截器则&lt;/strong>可以通过I&lt;strong>oC容器来管理&lt;/strong>，因此可以通过注入等方式来获取其他Bean的实例，因此使用会更方便。&lt;/p>
&lt;p>7、&lt;strong>过滤器只能在请求的前后使用，而拦截器可以详细到每个方法&lt;/strong>
&lt;img src="https://image.runtimes.cc/202404051459166.png" alt="">&lt;/p>
&lt;h1 id="spring-ioc">Spring IOC&lt;/h1>
&lt;p>Spring提供了两种容器：BeanFactory和ApplicationContext&lt;/p>
&lt;ul>
&lt;li>**BeanFactory：**基本的IoC容器，默认采用延迟初始化策略（lazy-load），即只有当客户端对象需要访问容器中某个bean对象的时候，才会对该bean对象进行初始化以及依赖注入操作。所以BeanFactory容器的特点是启动初期速度快，所需资源有限，适合于资源有限功能要求不严格的场景。&lt;/li>
&lt;li>&lt;strong>ApplicationContext：&lt;/strong> ApplicationContext在BeanFactory基础上构建，支持其他的高级特性，如国际化，事件发布等。相对于BeanFactory容器来说，ApplicationContext在启动的时候即完成资源的初始化，所以启动时间较长，适合于系统资源充足，需要更多功能的场景&lt;/li>
&lt;/ul>
&lt;h1 id="spring-bean">Spring Bean&lt;/h1>
&lt;p>Java 中Bean的定义：&lt;/p>
&lt;ul>
&lt;li>类中所有的属性都必须封装，即：使用private声明；&lt;code>这个不太确定&lt;/code>&lt;/li>
&lt;li>封装的属性如果需要被外部所操作，则必须编写对应的setter、getter方法；&lt;/li>
&lt;li>一个JavaBean中至少存在一个无参构造方法。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Staff&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setName&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setAge&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> age) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getName&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">getAge&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而Spring IoC容器就是管理bean的工厂。Spring中bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象。这些 bean 是由用容器提供的配置元数据创建的。Spring可以采用XML配置文件的方式来管理和配置Bean信息，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;beans&lt;/span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:xsi=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xsi:schemaLocation=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;bean&lt;/span> &lt;span style="color:#a6e22e">id=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;com.wgs.spring.bean.User&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;lt;/bean&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/beans&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>&amp;lt;beans&amp;gt;&lt;/code>是XML配置文件中根节点，下面可包含多个&lt;code>&amp;lt;bean&amp;gt;&lt;/code>子节点。Spring的XML配置文件中的配置与&lt;code>&amp;lt;bean&amp;gt;&lt;/code>元素是一一对应的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>注册到容器的对象都有一个唯一的id值，如id=&amp;ldquo;user&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>name&lt;/td>
&lt;td>bean的别名,name可以使用逗号、空格或冒号等分割指定多个name，而id就不可以&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scope&lt;/td>
&lt;td>作用域&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>constructor-arg&lt;/td>
&lt;td>用来注入依赖关系&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>properties&lt;/td>
&lt;td>用来注入依赖关系&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>autowiring mode&lt;/td>
&lt;td>用来注入依赖关系&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lazy-initialization mode&lt;/td>
&lt;td>是否延迟加载&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>initialization method&lt;/td>
&lt;td>bean被创建的时候,初始化的的方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>destruction method&lt;/td>
&lt;td>销毁指定的方法&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://image.runtimes.cc/202404051459690.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://image.runtimes.cc/202404051458611.png" alt="">&lt;/p>
&lt;h1 id="spring-bean-生命周期">Spring Bean 生命周期&lt;/h1>
&lt;p>2.低昂registerBeanFactoryPostProcessor  完成扫描,运行之前,不会有我们自己的类,除了&lt;code>@componentScan&lt;/code>这个注解的这个类,等完成之后,就会有我们自己的类&lt;/p>
&lt;p>1：实例化一个ApplicationContext的对象；2：调用bean工厂后置处理器完成扫描；3：循环解析扫描出来的类信息；4：实例化一个BeanDefinition对象来存储解析出来的信息；5：把实例化好的beanDefinition对象put到&lt;code>beanDefinitionMap&lt;/code>当中缓存起来，以便后面实例化bean；6：再次调用bean工厂后置处理器；7：当然spring还会干很多事情，比如国际化，比如注册BeanPostProcessor等等，如果我们只关心如何实例化一个bean的话那么这一步就是spring调用&lt;code>finishBeanFactoryInitialization&lt;/code>方法来实例化单例的bean，实例化之前spring要做验证，需要遍历所有扫描出来的类，依次判断这个bean是否Lazy，是否prototype，是否abstract等等；8：如果验证完成spring在实例化一个bean之前需要推断构造方法，因为spring实例化对象是通过构造方法反射，故而需要知道用哪个构造方法；9：推断完构造方法之后spring调用构造方法反射实例化一个&lt;strong>对象&lt;/strong>；注意我这里说的是对象、对象、对象；这个时候对象已经实例化出来了，但是并不是一个完整的bean，最简单的体现是这个时候实例化出来的对象属性是没有注入，所以不是一个完整的bean；10：spring处理合并后的beanDefinition(合并？是spring当中非常重要的一块内容，后面的文章我会分析)；11：判断是否支持循环依赖，如果支持则提前把一个工厂存入singletonFactories——map；12：判断是否需要完成属性注入13：如果需要完成属性注入，则开始注入属性14：判断bean的类型回调Aware接口15：调用生命周期回调方法16：如果需要代理则完成代理17：put到单例池——bean完成——存在spring容器当中&lt;/p>
&lt;h1 id="spring-bean-循环依赖">Spring Bean 循环依赖&lt;/h1>
&lt;p>&lt;a href="https://juejin.im/post/6844904166351978504#h5">https://juejin.im/post/6844904166351978504#h5&lt;/a>&lt;/p>
&lt;p>AnnotationConfigApplicationContext#AnnotationConfigApplicationContext&lt;/p>
&lt;pre tabindex="0">&lt;code>public AnnotationConfigApplicationContext(Class&amp;lt;?&amp;gt;... componentClasses) {
this();
register(componentClasses);
// 关键方法
refresh();
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.context.support.AbstractApplicationContext#refresh&lt;/p>
&lt;pre tabindex="0">&lt;code>@Override
public void refresh() throws BeansException, IllegalStateException {
synchronized (this.startupShutdownMonitor) {
// Prepare this context for refreshing.
prepareRefresh();
// Tell the subclass to refresh the internal bean factory.
ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();
// Prepare the bean factory for use in this context.
prepareBeanFactory(beanFactory);
try {
// Allows post-processing of the bean factory in context subclasses.
postProcessBeanFactory(beanFactory);
// Invoke factory processors registered as beans in the context.
invokeBeanFactoryPostProcessors(beanFactory);
// Register bean processors that intercept bean creation.
registerBeanPostProcessors(beanFactory);
// Initialize message source for this context.
initMessageSource();
// Initialize event multicaster for this context.
// 完成所有的扫描
initApplicationEventMulticaster();
// Initialize other special beans in specific context subclasses.
onRefresh();
// Check for listener beans and register them.
registerListeners();
// Instantiate all remaining (non-lazy-init) singletons.
// 实例化所有没有延迟的单例类
finishBeanFactoryInitialization(beanFactory);
// Last step: publish corresponding event.
finishRefresh();
}
}
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.context.support.AbstractApplicationContext#finishBeanFactoryInitialization&lt;/p>
&lt;pre tabindex="0">&lt;code>protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
// ....
// Instantiate all remaining (non-lazy-init) singletons.
// 实例化所有单例,非lazy
beanFactory.preInstantiateSingletons();
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons&lt;/p>
&lt;pre tabindex="0">&lt;code>@Override
public void preInstantiateSingletons() throws BeansException {
if (logger.isTraceEnabled()) {
logger.trace(&amp;#34;Pre-instantiating singletons in &amp;#34; + this);
}
// Iterate over a copy to allow for init methods which in turn register new bean definitions.
// While this may not be part of the regular factory bootstrap, it does otherwise work fine.
List&amp;lt;String&amp;gt; beanNames = new ArrayList&amp;lt;&amp;gt;(this.beanDefinitionNames);
// Trigger initialization of all non-lazy singleton beans...
for (String beanName : beanNames) {
RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
// 验证,判断这个是是不是抽象的和是不是单例的和是不是延迟加载的
if (!bd.isAbstract() &amp;amp;&amp;amp; bd.isSingleton() &amp;amp;&amp;amp; !bd.isLazyInit()) {
if (isFactoryBean(beanName)) {
Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);
if (bean instanceof FactoryBean) {
FactoryBean&amp;lt;?&amp;gt; factory = (FactoryBean&amp;lt;?&amp;gt;) bean;
boolean isEagerInit;
if (System.getSecurityManager() != null &amp;amp;&amp;amp; factory instanceof SmartFactoryBean) {
isEagerInit = AccessController.doPrivileged(
(PrivilegedAction&amp;lt;Boolean&amp;gt;) ((SmartFactoryBean&amp;lt;?&amp;gt;) factory)::isEagerInit,
getAccessControlContext());
}
else {
isEagerInit = (factory instanceof SmartFactoryBean &amp;amp;&amp;amp;
((SmartFactoryBean&amp;lt;?&amp;gt;) factory).isEagerInit());
}
if (isEagerInit) {
getBean(beanName);
}
}
}
else {
// 验证一切都通过的类,开始实例化普通的bean,还不是spring bean
getBean(beanName);
}
}
}
// ....
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)&lt;/p>
&lt;pre tabindex="0">&lt;code>@Override
public Object getBean(String name) throws BeansException {
return doGetBean(name, null, null, false);
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean&lt;/p>
&lt;p>这里面大部分都是验证,比如depenon,或者import&lt;/p>
&lt;pre tabindex="0">&lt;code>protected &amp;lt;T&amp;gt; T doGetBean(
String name, @Nullable Class&amp;lt;T&amp;gt; requiredType, @Nullable Object[] args, boolean typeCheckOnly)
throws BeansException {
// 理解bean的名字是否非法
String beanName = transformedBeanName(name);
Object bean;
// Eagerly check singleton cache for manually registered singletons.
// 这里的方法啊
Object sharedInstance = getSingleton(beanName);
if (sharedInstance != null &amp;amp;&amp;amp; args == null) {
bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);
}
else {
// Fail if we&amp;#39;re already creating this bean instance:
// We&amp;#39;re assumably within a circular reference.
// 判断这个类是不是在创建过程中,循环依赖的时候要用
if (isPrototypeCurrentlyInCreation(beanName)) {
throw new BeanCurrentlyInCreationException(beanName);
}
// Check if bean definition exists in this factory.
BeanFactory parentBeanFactory = getParentBeanFactory();
if (parentBeanFactory != null &amp;amp;&amp;amp; !containsBeanDefinition(beanName)) {
// 方法注入
// Not found -&amp;gt; check parent.
String nameToLookup = originalBeanName(name);
if (parentBeanFactory instanceof AbstractBeanFactory) {
return ((AbstractBeanFactory) parentBeanFactory).doGetBean(
nameToLookup, requiredType, args, typeCheckOnly);
}
else if (args != null) {
// Delegation to parent with explicit args.
return (T) parentBeanFactory.getBean(nameToLookup, args);
}
else if (requiredType != null) {
// No args -&amp;gt; delegate to standard getBean method.
return parentBeanFactory.getBean(nameToLookup, requiredType);
}
else {
return (T) parentBeanFactory.getBean(nameToLookup);
}
}
if (!typeCheckOnly) {
markBeanAsCreated(beanName);
}
try {
RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
checkMergedBeanDefinition(mbd, beanName, args);
// Guarantee initialization of beans that the current bean depends on.
String[] dependsOn = mbd.getDependsOn();
if (dependsOn != null) {
for (String dep : dependsOn) {
if (isDependent(beanName, dep)) {
throw new BeanCreationException(mbd.getResourceDescription(), beanName,
&amp;#34;Circular depends-on relationship between &amp;#39;&amp;#34; + beanName + &amp;#34;&amp;#39; and &amp;#39;&amp;#34; + dep + &amp;#34;&amp;#39;&amp;#34;);
}
registerDependentBean(dep, beanName);
try {
getBean(dep);
}
catch (NoSuchBeanDefinitionException ex) {
throw new BeanCreationException(mbd.getResourceDescription(), beanName,
&amp;#34;&amp;#39;&amp;#34; + beanName + &amp;#34;&amp;#39; depends on missing bean &amp;#39;&amp;#34; + dep + &amp;#34;&amp;#39;&amp;#34;, ex);
}
}
}
// Create bean instance.
// 判断类是不是单例
if (mbd.isSingleton()) {
// getSingleton(String,facotory) 这个方法里有正在创建中的标识设置
sharedInstance = getSingleton(beanName, () -&amp;gt; {
try {
// 完成了目标对象的创建
// 如果需要代理,还创建了代理
return createBean(beanName, mbd, args);
}
catch (BeansException ex) {
// Explicitly remove instance from singleton cache: It might have been put there
// eagerly by the creation process, to allow for circular reference resolution.
// Also remove any beans that received a temporary reference to the bean.
destroySingleton(beanName);
throw ex;
}
});
bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
}
else if (mbd.isPrototype()) {
// It&amp;#39;s a prototype -&amp;gt; create a new instance.
Object prototypeInstance = null;
try {
beforePrototypeCreation(beanName);
prototypeInstance = createBean(beanName, mbd, args);
}
finally {
afterPrototypeCreation(beanName);
}
bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
}
else {
String scopeName = mbd.getScope();
if (!StringUtils.hasLength(scopeName)) {
throw new IllegalStateException(&amp;#34;No scope name defined for bean ´&amp;#34; + beanName + &amp;#34;&amp;#39;&amp;#34;);
}
Scope scope = this.scopes.get(scopeName);
if (scope == null) {
throw new IllegalStateException(&amp;#34;No Scope registered for scope name &amp;#39;&amp;#34; + scopeName + &amp;#34;&amp;#39;&amp;#34;);
}
try {
Object scopedInstance = scope.get(beanName, () -&amp;gt; {
beforePrototypeCreation(beanName);
try {
return createBean(beanName, mbd, args);
}
finally {
afterPrototypeCreation(beanName);
}
});
bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
}
catch (IllegalStateException ex) {
throw new BeanCreationException(beanName,
&amp;#34;Scope &amp;#39;&amp;#34; + scopeName + &amp;#34;&amp;#39; is not active for the current thread; consider &amp;#34; +
&amp;#34;defining a scoped proxy for this bean if you intend to refer to it from a singleton&amp;#34;,
ex);
}
}
}
catch (BeansException ex) {
cleanupAfterBeanCreationFailure(beanName);
throw ex;
}
}
// Check if required type matches the type of the actual bean instance.
if (requiredType != null &amp;amp;&amp;amp; !requiredType.isInstance(bean)) {
try {
T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);
if (convertedBean == null) {
throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());
}
return convertedBean;
}
catch (TypeMismatchException ex) {
if (logger.isTraceEnabled()) {
logger.trace(&amp;#34;Failed to convert bean &amp;#39;&amp;#34; + name + &amp;#34;&amp;#39; to required type &amp;#39;&amp;#34; +
ClassUtils.getQualifiedName(requiredType) + &amp;#34;&amp;#39;&amp;#34;, ex);
}
throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());
}
}
return (T) bean;
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String)&lt;/p>
&lt;pre tabindex="0">&lt;code>// 上个代码块第七行调用的
@Override
@Nullable
public Object getSingleton(String beanName) {
return getSingleton(beanName, true);
}
/** Cache of singleton objects: bean name to bean instance. */
/** 缓存单例对象: bean name to bean instance. */
private final Map&amp;lt;String, Object&amp;gt; singletonObjects = new ConcurrentHashMap&amp;lt;&amp;gt;(256);
@Nullable
protected Object getSingleton(String beanName, boolean allowEarlyReference) {
// 初始化的时候这里肯定是null,但是在初始化完成之后,再调用getBean就肯定不是null
// isSingletonCurrentlyInCreation 这个方法很重要,说明对象是不是正在创建
// singletonFactories 也很重要
Object singletonObject = this.singletonObjects.get(beanName);
// 判断循环依赖的时候
if (singletonObject == null &amp;amp;&amp;amp; isSingletonCurrentlyInCreation(beanName)) {
synchronized (this.singletonObjects) {
singletonObject = this.earlySingletonObjects.get(beanName);
if (singletonObject == null &amp;amp;&amp;amp; allowEarlyReference) {
ObjectFactory&amp;lt;?&amp;gt; singletonFactory = this.singletonFactories.get(beanName);
if (singletonFactory != null) {
singletonObject = singletonFactory.getObject();
this.earlySingletonObjects.put(beanName, singletonObject);
this.singletonFactories.remove(beanName);
}
}
}
}
return singletonObject;
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean&lt;/p>
&lt;pre tabindex="0">&lt;code>@Override
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)
throws BeanCreationException {
if (logger.isTraceEnabled()) {
logger.trace(&amp;#34;Creating instance of bean &amp;#39;&amp;#34; + beanName + &amp;#34;&amp;#39;&amp;#34;);
}
RootBeanDefinition mbdToUse = mbd;
// Make sure bean class is actually resolved at this point, and
// clone the bean definition in case of a dynamically resolved Class
// which cannot be stored in the shared merged bean definition.
// 从beanDefinition对象中获取出来bean的类型
Class&amp;lt;?&amp;gt; resolvedClass = resolveBeanClass(mbd, beanName);
if (resolvedClass != null &amp;amp;&amp;amp; !mbd.hasBeanClass() &amp;amp;&amp;amp; mbd.getBeanClassName() != null) {
mbdToUse = new RootBeanDefinition(mbd);
mbdToUse.setBeanClass(resolvedClass);
}
// Prepare method overrides.
try {
mbdToUse.prepareMethodOverrides();
}
catch (BeanDefinitionValidationException ex) {
throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),
beanName, &amp;#34;Validation of method overrides failed&amp;#34;, ex);
}
try {
// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.
// 第一次调用个后置处理器
Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
if (bean != null) {
return bean;
}
}
catch (Throwable ex) {
throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName,
&amp;#34;BeanPostProcessor before instantiation of bean failed&amp;#34;, ex);
}
try {
// 调用方法
Object beanInstance = doCreateBean(beanName, mbdToUse, args);
if (logger.isTraceEnabled()) {
logger.trace(&amp;#34;Finished creating instance of bean &amp;#39;&amp;#34; + beanName + &amp;#34;&amp;#39;&amp;#34;);
}
return beanInstance;
}
catch (BeanCreationException | ImplicitlyAppearedSingletonException ex) {
// A previously detected exception with proper bean creation context already,
// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.
throw ex;
}
catch (Throwable ex) {
throw new BeanCreationException(
mbdToUse.getResourceDescription(), beanName, &amp;#34;Unexpected exception during bean creation&amp;#34;, ex);
}
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean&lt;/p>
&lt;pre tabindex="0">&lt;code>protected Object doCreateBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)
throws BeanCreationException {
// Instantiate the bean.
BeanWrapper instanceWrapper = null;
if (mbd.isSingleton()) {
instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);
}
if (instanceWrapper == null) {
// 实例化对象,里面第二次调调用后置处理器
// 反射调用对象的构造方法
// 这里java对象就已经有了
instanceWrapper = createBeanInstance(beanName, mbd, args);
}
Object bean = instanceWrapper.getWrappedInstance();
Class&amp;lt;?&amp;gt; beanType = instanceWrapper.getWrappedClass();
if (beanType != NullBean.class) {
mbd.resolvedTargetType = beanType;
}
// Allow post-processors to modify the merged bean definition.
synchronized (mbd.postProcessingLock) {
if (!mbd.postProcessed) {
try {
// 第三次调用后置处理器
applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
}
mbd.postProcessed = true;
}
}
// Eagerly cache singletons to be able to resolve circular references
// even when triggered by lifecycle interfaces like BeanFactoryAware.
// 判断是否需要循环依赖
boolean earlySingletonExposure =
// 到这里了,也肯定是true
(mbd.isSingleton() &amp;amp;&amp;amp;
// 默认值是true
this.allowCircularReferences &amp;amp;&amp;amp;
isSingletonCurrentlyInCreation(beanName));
if (earlySingletonExposure) {
// 第四次调用后置处理器,判断是否需要AOP
addSingletonFactory(beanName, () -&amp;gt; getEarlyBeanReference(beanName, mbd, bean));
}
// Initialize the bean instance.
Object exposedObject = bean;
try {
// 填充属性,也就是我们说的自动注入
// 里面会完成第五次和第六次后置处理器的调用
// 看这里
populateBean(beanName, mbd, instanceWrapper);
// 初始化spring
// 里面会进行第七次和第八次后置处理的调用个
exposedObject = initializeBean(beanName, exposedObject, mbd);
}
catch (Throwable ex) {
if (ex instanceof BeanCreationException &amp;amp;&amp;amp; beanName.equals(((BeanCreationException) ex).getBeanName())) {
throw (BeanCreationException) ex;
}
else {
throw new BeanCreationException(
mbd.getResourceDescription(), beanName, &amp;#34;Initialization of bean failed&amp;#34;, ex);
}
}
if (earlySingletonExposure) {
Object earlySingletonReference = getSingleton(beanName, false);
if (earlySingletonReference != null) {
if (exposedObject == bean) {
exposedObject = earlySingletonReference;
}
else if (!this.allowRawInjectionDespiteWrapping &amp;amp;&amp;amp; hasDependentBean(beanName)) {
String[] dependentBeans = getDependentBeans(beanName);
Set&amp;lt;String&amp;gt; actualDependentBeans = new LinkedHashSet&amp;lt;&amp;gt;(dependentBeans.length);
for (String dependentBean : dependentBeans) {
if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {
actualDependentBeans.add(dependentBean);
}
}
// 省略代码
}
}
}
// Register bean as disposable.
try {
registerDisposableBeanIfNecessary(beanName, bean, mbd);
}
catch (BeanDefinitionValidationException ex) {
throw new BeanCreationException(
mbd.getResourceDescription(), beanName, &amp;#34;Invalid destruction signature&amp;#34;, ex);
}
return exposedObject;
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance&lt;/p>
&lt;pre tabindex="0">&lt;code>protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) {
// Make sure bean class is actually resolved at this point.
Class&amp;lt;?&amp;gt; beanClass = resolveBeanClass(mbd, beanName);
if (beanClass != null &amp;amp;&amp;amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;amp;&amp;amp; !mbd.isNonPublicAccessAllowed()) {
throw new BeanCreationException(mbd.getResourceDescription(), beanName,
&amp;#34;Bean class isn&amp;#39;t public, and non-public access not allowed: &amp;#34; + beanClass.getName());
}
Supplier&amp;lt;?&amp;gt; instanceSupplier = mbd.getInstanceSupplier();
if (instanceSupplier != null) {
return obtainFromSupplier(instanceSupplier, beanName);
}
if (mbd.getFactoryMethodName() != null) {
return instantiateUsingFactoryMethod(beanName, mbd, args);
}
// Shortcut when re-creating the same bean...
boolean resolved = false;
boolean autowireNecessary = false;
if (args == null) {
synchronized (mbd.constructorArgumentLock) {
if (mbd.resolvedConstructorOrFactoryMethod != null) {
resolved = true;
autowireNecessary = mbd.constructorArgumentsResolved;
}
}
}
if (resolved) {
if (autowireNecessary) {
return autowireConstructor(beanName, mbd, null, null);
}
else {
return instantiateBean(beanName, mbd);
}
}
// Candidate constructors for autowiring?
// 第二次调用后置处理器构造方法,通过反射实例化对象,这时候构造方法里有打印,就会打印出日志
Constructor&amp;lt;?&amp;gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);
if (ctors != null || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||
mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) {
return autowireConstructor(beanName, mbd, ctors, args);
}
// Preferred constructors for default construction?
ctors = mbd.getPreferredConstructors();
if (ctors != null) {
return autowireConstructor(beanName, mbd, ctors, null);
}
// No special handling: simply use no-arg constructor.
return instantiateBean(beanName, mbd);
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#populateBean&lt;/p>
&lt;pre tabindex="0">&lt;code>protected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) {
if (bw == null) {
if (mbd.hasPropertyValues()) {
throw new BeanCreationException(
mbd.getResourceDescription(), beanName, &amp;#34;Cannot apply property values to null instance&amp;#34;);
}
else {
// Skip property population phase for null instance.
return;
}
}
// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the
// state of the bean before properties are set. This can be used, for example,
// to support styles of field injection.
if (!mbd.isSynthetic() &amp;amp;&amp;amp; hasInstantiationAwareBeanPostProcessors()) {
for (BeanPostProcessor bp : getBeanPostProcessors()) {
if (bp instanceof InstantiationAwareBeanPostProcessor) {
InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {
return;
}
}
}
}
PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : null);
int resolvedAutowireMode = mbd.getResolvedAutowireMode();
if (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) {
MutablePropertyValues newPvs = new MutablePropertyValues(pvs);
// Add property values based on autowire by name if applicable.
if (resolvedAutowireMode == AUTOWIRE_BY_NAME) {
autowireByName(beanName, mbd, bw, newPvs);
}
// Add property values based on autowire by type if applicable.
if (resolvedAutowireMode == AUTOWIRE_BY_TYPE) {
autowireByType(beanName, mbd, bw, newPvs);
}
pvs = newPvs;
}
boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();
boolean needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);
PropertyDescriptor[] filteredPds = null;
if (hasInstAwareBpps) {
if (pvs == null) {
pvs = mbd.getPropertyValues();
}
for (BeanPostProcessor bp : getBeanPostProcessors()) {
if (bp instanceof InstantiationAwareBeanPostProcessor) {
// 这里的ibp常用的有两种类型
// 1.@Resouce 使用的是CommonAnnotationBeanPostProcessor
// 2.@Autowire 使用的是AutoWireAnnotationBeanPostProcessor
InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
// 这里会调用属性的注入,也就是在这里,碰到循环依赖的时候,就会调用个
// org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton
PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);
if (pvsToUse == null) {
if (filteredPds == null) {
filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
}
pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);
if (pvsToUse == null) {
return;
}
}
pvs = pvsToUse;
}
}
}
if (needsDepCheck) {
if (filteredPds == null) {
filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
}
checkDependencies(beanName, mbd, filteredPds, pvs);
}
if (pvs != null) {
applyPropertyValues(beanName, mbd, bw, pvs);
}
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String, org.springframework.beans.factory.ObjectFactory&lt;?>)&lt;/p>
&lt;pre tabindex="0">&lt;code>public Object getSingleton(String beanName, ObjectFactory&amp;lt;?&amp;gt; singletonFactory) {
Assert.notNull(beanName, &amp;#34;Bean name must not be null&amp;#34;);
synchronized (this.singletonObjects) {
Object singletonObject = this.singletonObjects.get(beanName);
if (singletonObject == null) {
if (this.singletonsCurrentlyInDestruction) {
throw new BeanCreationNotAllowedException(beanName,
&amp;#34;Singleton bean creation not allowed while singletons of this factory are in destruction &amp;#34; +
&amp;#34;(Do not request a bean from a BeanFactory in a destroy method implementation!)&amp;#34;);
}
if (logger.isDebugEnabled()) {
logger.debug(&amp;#34;Creating shared instance of singleton bean &amp;#39;&amp;#34; + beanName + &amp;#34;&amp;#39;&amp;#34;);
}
// 重点,如果没有获取到,就设置个标识,表示正在创建
beforeSingletonCreation(beanName);
boolean newSingleton = false;
boolean recordSuppressedExceptions = (this.suppressedExceptions == null);
if (recordSuppressedExceptions) {
this.suppressedExceptions = new LinkedHashSet&amp;lt;&amp;gt;();
}
try {
singletonObject = singletonFactory.getObject();
newSingleton = true;
}
catch (IllegalStateException ex) {
// Has the singleton object implicitly appeared in the meantime -&amp;gt;
// if yes, proceed with it since the exception indicates that state.
singletonObject = this.singletonObjects.get(beanName);
if (singletonObject == null) {
throw ex;
}
}
catch (BeanCreationException ex) {
if (recordSuppressedExceptions) {
for (Exception suppressedException : this.suppressedExceptions) {
ex.addRelatedCause(suppressedException);
}
}
throw ex;
}
finally {
if (recordSuppressedExceptions) {
this.suppressedExceptions = null;
}
afterSingletonCreation(beanName);
}
if (newSingleton) {
addSingleton(beanName, singletonObject);
}
}
return singletonObject;
}
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#beforeSingletonCreation&lt;/p>
&lt;pre tabindex="0">&lt;code>/** Names of beans that are currently in creation. */
// 添加到这里来了之后就标识当前这个bean正在创建
private final Set&amp;lt;String&amp;gt; singletonsCurrentlyInCreation =
Collections.newSetFromMap(new ConcurrentHashMap&amp;lt;&amp;gt;(16));
protected void beforeSingletonCreation(String beanName) {
if (!this.inCreationCheckExclusions.contains(beanName) &amp;amp;&amp;amp; !this.singletonsCurrentlyInCreation.add(beanName)) {
throw new BeanCurrentlyInCreationException(beanName);
}
}
&lt;/code>&lt;/pre>&lt;p>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#addSingletonFactory&lt;/p>
&lt;p>二级缓存&lt;/p>
&lt;pre tabindex="0">&lt;code>protected void addSingletonFactory(String beanName, ObjectFactory&amp;lt;?&amp;gt; singletonFactory) {
Assert.notNull(singletonFactory, &amp;#34;Singleton factory must not be null&amp;#34;);
synchronized (this.singletonObjects) {
if (!this.singletonObjects.containsKey(beanName)) {
this.singletonFactories.put(beanName, singletonFactory);
this.earlySingletonObjects.remove(beanName);
this.registeredSingletons.add(beanName);
}
}
}
&lt;/code>&lt;/pre>&lt;h3 id="三个缓存">三个缓存&lt;/h3>
&lt;pre tabindex="0">&lt;code>// singletonObjects：第一级缓存，里面存放的都是创建好的成品Bean。
private final Map&amp;lt;String, Object&amp;gt; singletonObjects = new ConcurrentHashMap&amp;lt;String, Object(256);
// earlySingletonObjects : 第二级缓存，里面存放的都是半成品的Bean
private final Map&amp;lt;String, Object&amp;gt; earlySingletonObjects = new HashMap&amp;lt;String, Object(16);
// singletonFactories ：第三级缓存， 不同于前两个存的是 Bean对象引用，此缓存存的bean 工厂对象，也就存的是 专门创建Bean的一个工厂对象。此缓存用于解决循环依赖
private final Map&amp;lt;String, ObjectFactory&amp;lt;?&amp;gt;&amp;gt; singletonFactories = new HashMap&amp;lt;String, ObjectFactory&amp;lt;?&amp;gt;&amp;gt;(16);
&lt;/code>&lt;/pre>&lt;h3 id="两个缓存能解决不">两个缓存能解决不&lt;/h3>
&lt;p>A引用创建后，提前暴露到&lt;code>半成品缓存中&lt;/code>&lt;/p>
&lt;p>依赖B，创建B ，B填充属性时发现依赖A， &lt;code>先从成品缓存查找，没有,再从半成品缓存查找&lt;/code> 取到A的&lt;code>早期引用&lt;/code>。&lt;/p>
&lt;pre tabindex="0">&lt;code>B顺利走完创建过程`, 将`B的早期引用从半成品缓存移动到成品缓存
&lt;/code>&lt;/pre>&lt;p>B创建完成，A获取到B的引用，继续创建。&lt;/p>
&lt;p>A创建完成，将&lt;code>A的早期引用从半成品缓存移动到成品缓存&lt;/code>&lt;/p>
&lt;h3 id="为啥需要三个缓存">为啥需要三个缓存&lt;/h3>
&lt;p>上面两个缓存的地方，我们只是没有考虑代理的情况。&lt;/p>
&lt;p>Bean在创建的最后阶段，会检查是否需要创建代理，如果创建了代理，那么最终返回的就是代理实例的引用。我们通过beanname获取到最终是代理实例的引用&lt;/p>
&lt;p>也就是说：假设A最终会创建代理，提前暴露A的引用， B填充属性时填充的是A的原始对象引用。A最终放入成品库里是代理的引用。那么B中依然是A的早期引用。这种结果最终会与我们的期望的大相径庭了。&lt;/p>
&lt;h3 id="完整的流程">完整的流程&lt;/h3>
&lt;p>关键点：&lt;/p>
&lt;ul>
&lt;li>A绑定到ObjectFactory 注册到&lt;code>工厂缓存singletonFactory&lt;/code>中，&lt;/li>
&lt;li>B在填充A时，&lt;code>先查成品缓存&lt;/code>有没有，&lt;code>再查半成品缓存&lt;/code>有没有，&lt;code>最后看工厂缓存有没有单例工厂类&lt;/code>，有A的ObjectFactory。调用getObject ，执行扩展逻辑，可能返回的代理引用，也可能返回原始引用。&lt;/li>
&lt;li>成功获取到A的早期引用，将A放入到&lt;code>半成品缓存&lt;/code>中，B填充A引用完毕。&lt;/li>
&lt;li>代理问题， 循环依赖问题都解决了&lt;/li>
&lt;/ul>
&lt;h1 id="spring-bean-二次开发">Spring Bean 二次开发&lt;/h1>
&lt;p>在实例化Bean之前,Spring会调用扩展的类,实现&lt;code>BeanFactoryPostProcessor&lt;/code>,并且机上&lt;code>@component&lt;/code>注解,如果没有实现,spring就不会调用&lt;/p>
&lt;h1 id="spring-aop">Spring AOP&lt;/h1>
&lt;h1 id="aop是什么">AOP是什么&lt;/h1>
&lt;p>AOP的全称是Aspect Orient Programming，即面向切面编程。是对OOP（Object Orient Programming）的一种补充，战门用于处理一些具有横切性质的服务。常常用于日志输出、安全控制等。&lt;/p>
&lt;p>上面说到是对OOP的一种补充，具体补充的是什么呢？考虑一种情况，如果我们需要在所有方法执行前打印一句日志，按照OOP的处理思想，我们需要在每个业务方法开始时加入一些语句，但是我们辛辛苦苦加完之后，如果又要求在这句日志打印后再打印一句，那是不是又要加一遍？这时候你一定会想到，在某个类中编写一个日志打印方法，该方法执行这些日志打印操作，然后在每个业务方法之前加入这句方法调用，这就是面向对象编程思想。但是如果要求我们在业务方法结束时再打印一些日志呢，是不是还要去每个业务方法结束时加一遍？这样始终不是办法，而且我们总是在改业务方法，在业务方法里面掺杂了太多的其他操作，侵入性太高。&lt;/p>
&lt;p>这时候AOP就起到作用了，我们可以编写一个切面类（Aspect），在其中的方法中来编写横切逻辑（如打印日志），然后通过配置或者注解的方式来声明该横切逻辑起作用的位置。&lt;/p>
&lt;h1 id="实现技术">实现技术&lt;/h1>
&lt;p>AOP（这里的AOP指的是面向切面编程思想，而不是Spring AOP）主要的的实现技术主要有Spring AOP和AspectJ。&lt;/p>
&lt;p>1、AspectJ的底层技术。&lt;/p>
&lt;p>AspectJ的底层技术是静态代理，即用一种AspectJ支持的特定语言编写切面，通过一个命令来编译，生成一个新的代理类，该代理类增强了业务类，这是在编译时增强，相对于下面说的运行时增强，编译时增强的性能更好。&lt;/p>
&lt;p>2、Spring AOP&lt;/p>
&lt;p>Spring AOP采用的是动态代理，在运行期间对业务方法进行增强，所以不会生成新类，对于动态代理技术，Spring AOP提供了对JDK动态代理的支持以及CGLib的支持。&lt;/p>
&lt;p>JDK动态代理只能为接口创建动态代理实例，而不能对类创建动态代理。需要获得被目标类的接口信息（应用Java的反射技术），生成一个实现了代理接口的动态代理类（字节码），再通过反射机制获得动态代理类的构造函数，利用构造函数生成动态代理类的实例对象，在调用具体方法前调用invokeHandler方法来处理。&lt;/p>
&lt;p>CGLib动态代理需要依赖asm包，把被代理对象类的class文件加载进来，修改其字节码生成子类。&lt;/p>
&lt;p>但是Spring AOP基于注解配置的情况下，需要依赖于AspectJ包的标准注解，但是不需要额外的编译以及AspectJ的织入器，而基于XML配置不需要。&lt;/p>
&lt;h1 id="知识点">知识点&lt;/h1>
&lt;h3 id="pointcut">PointCut&lt;/h3>
&lt;p>你想要去切某个东西之前总得先知道要在哪里切入是吧，切点格式如下：&lt;code>execution(* com.nuofankj.springdemo.aop.*Service.*(..))&lt;/code>格式使用了正常表达式来定义那个范围内的类、那些接口会被当成切点&lt;/p>
&lt;h3 id="advice">Advice&lt;/h3>
&lt;p>通知,所谓的Advice其实就是定义了Aop何时被调用，确实有种通知的感觉&lt;/p>
&lt;ul>
&lt;li>Before 在方法被调用之前调用&lt;/li>
&lt;li>After 在方法完成之后调用&lt;/li>
&lt;li>After-returning 在方法成功执行之后调用&lt;/li>
&lt;li>After-throwing 在方法抛出异常之后调用&lt;/li>
&lt;li>Around 在被通知的方法调用之前和调用之后调用&lt;/li>
&lt;/ul>
&lt;h3 id="joinpoint">JoinPoint&lt;/h3>
&lt;p>JoinPoint连接点，其实很好理解，上面又有通知、又有切点，那和具体业务的连接点又是什么呢？没错，其实就是对应业务的方法对象，因为我们在横切代码中是有可能需要用到具体方法中的具体数据的，而连接点便可以做到这一点。&lt;/p>
&lt;h3 id="aspect">Aspect&lt;/h3>
&lt;p>就是我们关注点的模块化。这个关注点可能会横切多个对象和模块，事务管理是横切关注点的很好的例子。它是一个抽象的概念，从软件的角度来说是指在应用程序不同模块中的某一个领域或方面。又pointcut 和advice组成。&lt;/p>
&lt;h3 id="weaving">Weaving&lt;/h3>
&lt;p>把切面应用到目标对象来创建新的 advised 对象的过程。&lt;/p>
&lt;h1 id="原理">原理&lt;/h1>
&lt;h3 id="简单说说-aop-的设计">简单说说 AOP 的设计&lt;/h3>
&lt;ol>
&lt;li>每个 Bean 都会被 JDK 或者 Cglib 代理。取决于是否有接口。&lt;/li>
&lt;li>每个 Bean 会有多个“方法拦截器”。注意：拦截器分为两层，外层由 Spring 内核控制流程，内层拦截器是用户设置，也就是 AOP。&lt;/li>
&lt;li>当代理方法被调用时，先经过外层拦截器，外层拦截器根据方法的各种信息判断该方法应该执行哪些“内层拦截器”。内层拦截器的设计就是职责连的设计。&lt;/li>
&lt;/ol>
&lt;h3 id="流程">流程&lt;/h3>
&lt;p>代理的创建（按步骤）：&lt;/p>
&lt;ul>
&lt;li>首先，需要创建代理工厂，代理工厂需要 3 个重要的信息：拦截器数组，目标对象接口数组，目标对象。&lt;/li>
&lt;li>创建代理工厂时，默认会在拦截器数组尾部再增加一个默认拦截器 —— 用于最终的调用目标方法。&lt;/li>
&lt;li>当调用 getProxy 方法的时候，会根据接口数量大余 0 条件返回一个代理对象（JDK or Cglib）。&lt;/li>
&lt;li>注意：创建代理对象时，同时会创建一个外层拦截器，这个拦截器就是 Spring 内核的拦截器。用于控制整个 AOP 的流程。&lt;/li>
&lt;/ul>
&lt;p>代理的调用&lt;/p>
&lt;ul>
&lt;li>当对代理对象进行调用时，就会触发外层拦截器。&lt;/li>
&lt;li>外层拦截器根据代理配置信息，创建内层拦截器链。创建的过程中，会根据表达式判断当前拦截是否匹配这个拦截器。而这个拦截器链设计模式就是职责链模式。&lt;/li>
&lt;li>当整个链条执行到最后时，就会触发创建代理时那个尾部的默认拦截器，从而调用目标方法。最后返回。&lt;/li>
&lt;/ul>
&lt;h1 id="springmcc临时用的">SpringMCC临时用的&lt;/h1>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/62562499">https://zhuanlan.zhihu.com/p/62562499&lt;/a>&lt;/p>
&lt;h1 id="设置属性">设置属性&lt;/h1>
&lt;pre tabindex="0">&lt;code>// 1. 设置属性
// Make web application context available
request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());
// Make locale resolver available
request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);
// Make theme resolver available
request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);
&lt;/code>&lt;/pre>&lt;h1 id="根据-request-请求的-url-得到对应的-handler-执行链其实就是拦截器和-controller-代理对象">根据 Request 请求的 URL 得到对应的 handler 执行链，其实就是拦截器和 Controller 代理对象&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2. 找 handler 返回执行链&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HandlerExecutionChain mappedHandler &lt;span style="color:#f92672">=&lt;/span> getHandler(request);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="得到-handler-的适配器">得到 handler 的适配器&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// This will throw an exception if no adapter is found&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 3. 返回 handler 的适配器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HandlerAdapter ha &lt;span style="color:#f92672">=&lt;/span> getHandlerAdapter(mappedHandler.&lt;span style="color:#a6e22e">getHandler&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="循环执行-handler-的-pre-拦截器">循环执行 handler 的 pre 拦截器&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 4. 循环执行 handler 的 pre 拦截器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> mappedHandler.&lt;span style="color:#a6e22e">getInterceptors&lt;/span>().&lt;span style="color:#a6e22e">length&lt;/span>; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HandlerInterceptor interceptor &lt;span style="color:#f92672">=&lt;/span> mappedHandler.&lt;span style="color:#a6e22e">getInterceptors&lt;/span>()&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// pre 拦截器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>interceptor.&lt;span style="color:#a6e22e">preHandle&lt;/span>(request, response, mappedHandler.&lt;span style="color:#a6e22e">getHandler&lt;/span>())) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="执行真正的-handler并返回-modelandviewhandler-是个代理对象可能会执行-aop-">执行真正的 handler，并返回 ModelAndView(Handler 是个代理对象，可能会执行 AOP )&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 5. 执行真正的 handler，并返回 ModelAndView(Handler 是个代理对象，可能会执行 AOP )&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ModelAndView mv &lt;span style="color:#f92672">=&lt;/span> ha.&lt;span style="color:#a6e22e">handle&lt;/span>(request, response, mappedHandler.&lt;span style="color:#a6e22e">getHandler&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="循环执行-handler-的-post-拦截器">循环执行 handler 的 post 拦截器&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 6. 循环执行 handler 的 post 拦截器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> mappedHandler.&lt;span style="color:#a6e22e">getInterceptors&lt;/span>().&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> 1; i &lt;span style="color:#f92672">&amp;gt;=&lt;/span>0 ; i&lt;span style="color:#f92672">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HandlerInterceptor interceptor &lt;span style="color:#f92672">=&lt;/span> mappedHandler.&lt;span style="color:#a6e22e">getInterceptors&lt;/span>()&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// post 拦截器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> interceptor.&lt;span style="color:#a6e22e">postHandle&lt;/span>(request, response, mappedHandler.&lt;span style="color:#a6e22e">getHandler&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> 根据 ModelAndView 信息得到 View 实例
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> View view &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (mv.&lt;span style="color:#a6e22e">isReference&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We need to resolve this view name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 7. 根据 ModelAndView 信息得到 View 实例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> view &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">viewResolver&lt;/span>.&lt;span style="color:#a6e22e">resolveViewName&lt;/span>(mv.&lt;span style="color:#a6e22e">getViewName&lt;/span>(), locale);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> 渲染 View 返回
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 8. 渲染 View 返回&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>view.&lt;span style="color:#a6e22e">render&lt;/span>(mv.&lt;span style="color:#a6e22e">getModel&lt;/span>(), request, response);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实理解这些才是最重要的。&lt;/p>
&lt;ol>
&lt;li>用户发送请求至前端控制器DispatcherServlet&lt;/li>
&lt;li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。&lt;/li>
&lt;li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。&lt;/li>
&lt;li>DispatcherServlet通过HandlerAdapter处理器适配器调用处理器&lt;/li>
&lt;li>HandlerAdapter执行处理器(handler，也叫后端控制器)。&lt;/li>
&lt;li>Controller执行完成返回ModelAndView&lt;/li>
&lt;li>HandlerAdapter将handler执行结果ModelAndView返回给DispatcherServlet&lt;/li>
&lt;li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器&lt;/li>
&lt;li>ViewReslover解析后返回具体View对象&lt;/li>
&lt;li>DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。&lt;/li>
&lt;li>DispatcherServlet响应用户&lt;/li>
&lt;/ol>
&lt;h1 id="springboot-启动流程">Springboot 启动流程&lt;/h1>
&lt;p>&lt;a href="https://juejin.im/post/6844903669998026759">https://juejin.im/post/6844903669998026759&lt;/a>&lt;/p>
&lt;p>通过 &lt;code>SpringFactoriesLoader&lt;/code> 加载 &lt;code>META-INF/spring.factories&lt;/code> 文件，获取并创建 &lt;code>SpringApplicationRunListener&lt;/code> 对象&lt;/p>
&lt;p>然后由 &lt;code>SpringApplicationRunListener&lt;/code> 来发出 starting 消息&lt;/p>
&lt;p>创建参数，并配置当前 SpringBoot 应用将要使用的 Environment&lt;/p>
&lt;p>完成之后，依然由 &lt;code>SpringApplicationRunListener&lt;/code> 来发出 environmentPrepared 消息&lt;/p>
&lt;p>创建 &lt;code>ApplicationContext&lt;/code>&lt;/p>
&lt;p>初始化 &lt;code>ApplicationContext&lt;/code>，并设置 Environment，加载相关配置等&lt;/p>
&lt;p>由 &lt;code>SpringApplicationRunListener&lt;/code> 来发出 &lt;code>contextPrepared&lt;/code> 消息，告知SpringBoot 应用使用的 &lt;code>ApplicationContext&lt;/code> 已准备OK&lt;/p>
&lt;p>将各种 beans 装载入 &lt;code>ApplicationContext&lt;/code>，继续由 &lt;code>SpringApplicationRunListener&lt;/code> 来发出 contextLoaded 消息，告知 SpringBoot 应用使用的 &lt;code>ApplicationContext&lt;/code> 已装填OK&lt;/p>
&lt;p>refresh ApplicationContext，完成IoC容器可用的最后一步&lt;/p>
&lt;p>由 &lt;code>SpringApplicationRunListener&lt;/code> 来发出 started 消息&lt;/p>
&lt;p>完成最终的程序的启动&lt;/p>
&lt;p>由 &lt;code>SpringApplicationRunListener&lt;/code> 来发出 running 消息，告知程序已运行起来了&lt;/p>
&lt;h1 id="静态变量注入">静态变量注入&lt;/h1>
&lt;pre tabindex="0">&lt;code>application.properties中配置下面两个配置项
ccb.ip.address=10.25.177.31
ccb.ip.port=1600
下面问题代码中读取不到application.properties配置文件中的配置
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>@Component
public class BISFrontFileUtil {
private static Logger logger = LoggerFactory.getLogger(BISFrontFileUtil.class);
private static String CCBIPADDRESS;
private static int CCBIPPORT;
@Value(&amp;#34;${ccb.ip.address}&amp;#34;)
public void setCCBIPADDRESS(String cCBIPADDRESS) {
CCBIPADDRESS = cCBIPADDRESS;
}
@Value(&amp;#34;${ccb.ip.port}&amp;#34;)
public void setCCBIPPORT(int cCBIPPORT) {
CCBIPPORT = cCBIPPORT;
}
}
&lt;/code>&lt;/pre>&lt;p>注意:&lt;/p>
&lt;ol>
&lt;li>修正代码中的@Component不可丢掉了&lt;/li>
&lt;li>set方法要是非静态的&lt;/li>
&lt;/ol>
&lt;h1 id="springboot的注解">SpringBoot的注解&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://juejin.cn/post/6844903842476195848#heading-12">@Configuration&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="configuration">&lt;a href="#ZgotmplZ">@Configuration&lt;/a>&lt;/h1>
&lt;h3 id="配置并启动spring容器">配置并启动Spring容器&lt;/h3>
&lt;p>@Configuration标注在类上，相当于把该类作为spring的xml配置文件中的，作用为：配置spring容器(应用上下文)&lt;/p>
&lt;pre tabindex="0">&lt;code>import org.springframework.context.annotation.Configuration;
@Configuration
public class TestConfig {
public TestConfig(){
System.out.println(&amp;#34;testconfig collection init success&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;p>相当于&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;beans&lt;/span> &lt;span style="color:#a6e22e">xmlns=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">xmlns:xsi=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:context=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.springframework.org/schema/context&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">xmlns:jdbc=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.springframework.org/schema/jdbc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:jee=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.springframework.org/schema/jee&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">xmlns:tx=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.springframework.org/schema/tx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">xmlns:util=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.springframework.org/schema/util&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">xmlns:task=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://www.springframework.org/schema/task&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">xsi:schemaLocation=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">default-lazy-init=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/beans&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>主方法进行测试:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.context.ApplicationContext;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.context.annotation.AnnotationConfigApplicationContext;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ApplicationContext context &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> AnnotationConfigApplicationContext(TestConfig.&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果加载spring-context.xml文件：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ApplicationContext context = new&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ClassPathXmlApplicationContext(&amp;#34;spring-context.xml&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 结果&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARNING: All illegal access operations will be denied in a future release
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>testconfig collection init success
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Process finished with exit code 0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configuration启动容器bean注册bean">@Configuration启动容器+@Bean注册Bean&lt;/h3>
&lt;p>@Bean标注在方法上(返回某个实例的方法)，等价于spring的xml配置文件中的，作用为：注册bean对象&lt;/p>
&lt;pre tabindex="0">&lt;code>@Configuration
public class TestConfig {
public TestConfig(){
System.out.println(&amp;#34;testconfig collection init success&amp;#34;);
}
// @Bean注解注册bean,同时可以指定初始化和销毁方法
// @Bean(name=&amp;#34;testBean&amp;#34;,initMethod=&amp;#34;start&amp;#34;,destroyMethod=&amp;#34;cleanup&amp;#34;)
//name属性相当于&amp;lt;bean&amp;gt;标签的id
@Bean
@Scope(&amp;#34;prototype&amp;#34;)
public TestBean testBean() {
return new TestBean();
}
}
class TestBean {
private String username;
private String url;
private String password;
public void sayHello() {
System.out.println(&amp;#34;TestBean sayHello...&amp;#34;);
}
public void start() {
System.out.println(&amp;#34;TestBean init...&amp;#34;);
}
public void cleanup() {
System.out.println(&amp;#34;TestBean destroy...&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;p>测试类&lt;/p>
&lt;pre tabindex="0">&lt;code>public class Main {
public static void main(String[] args) {
// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext
ApplicationContext context = new AnnotationConfigApplicationContext(TestConfig.class);
System.out.println(context);
// 如果加载spring-context.xml文件：
// ApplicationContext context = new
// ClassPathXmlApplicationContext(&amp;#34;spring-context.xml&amp;#34;);
//获取bean
TestBean testBean = (TestBean) context.getBean(&amp;#34;testBean&amp;#34;);
testBean.sayHello();
}
}
// 结果
结果：
testconfig collection init success
TestBean sayHello...
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>@Bean注解在返回实例的方法上，如果未通过@Bean指定bean的名称，则默认与标注的方法名相同（第一个单词转小写）&lt;/li>
&lt;li>@Bean注解默认作用域为单例singleton作用域，可通过@Scope(“prototype”)设置为原型作用域&lt;/li>
&lt;li>既然@Bean的作用是注册bean对象，那么完全可以使用@Component、@Controller、@Service、@Ripository等注解注册bean，当然需要配置@ComponentScan注解进行自动扫描&lt;/li>
&lt;/ul>
&lt;p>scope属性1).  singleton属性值（掌握）：默认值，单例2). prototype属性值（掌握）：多例（原型作用域）3). request属性值(了解）：创建对象，把对象放到request域里4). session属性值(了解）：创建对象，把对象放到session域里5). globalSession属性值(了解）：创建对象，把对象放到globalSession域里&lt;/p>
&lt;h3 id="bean下管理bean的生命周期">@Bean下管理bean的生命周期&lt;/h3>
&lt;pre tabindex="0">&lt;code>// 用上面的例子
//@Bean注解注册bean,同时可以指定初始化和销毁方法
@Bean(name=&amp;#34;testBean&amp;#34;,initMethod=&amp;#34;start&amp;#34;,destroyMethod=&amp;#34;cleanUp&amp;#34;)
@Scope(&amp;#34;prototype&amp;#34;)
public TestBean testBean() {
return new TestBean();
}
&lt;/code>&lt;/pre>&lt;p>测试类&lt;/p>
&lt;pre tabindex="0">&lt;code>// 结果
testconfig collection init success
org.springframework.context.annotation.AnnotationConfigApplicationContext@41975e01, started on Mon Jul 19 09:51:42 PST 2021
TestBean init...
TestBean sayHello...
&lt;/code>&lt;/pre>&lt;h3 id="configuration启动容器component注册bean">@Configuration启动容器+@Component注册Bean&lt;/h3>
&lt;p>bean类&lt;/p>
&lt;pre tabindex="0">&lt;code>//添加注册bean的注解
@Component
public class TestBean {
private String username;
private String url;
private String password;
public void sayHello() {
System.out.println(&amp;#34;TestBean sayHello...&amp;#34;);
}
public void start() {
System.out.println(&amp;#34;TestBean init...&amp;#34;);
}
public void cleanup() {
System.out.println(&amp;#34;TestBean destroy...&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;p>配置类：&lt;/p>
&lt;pre tabindex="0">&lt;code>@Configuration
//添加自动扫描注解，basePackages为TestBean包路径
@ComponentScan(basePackages = &amp;#34;com.example.demo.spring2&amp;#34;)
public class TestConfig {
public TestConfig(){
System.out.println(&amp;#34;testconfig collection init success&amp;#34;);
}
// @Bean注解注册bean,同时可以指定初始化和销毁方法
// @Bean(name=&amp;#34;testBean&amp;#34;,initMethod=&amp;#34;start&amp;#34;,destroyMethod=&amp;#34;cleanup&amp;#34;)
//// @Bean
// @Scope(&amp;#34;prototype&amp;#34;)
// public TestBean testBean() {
// return new TestBean();
// }
}
&lt;/code>&lt;/pre>&lt;p>测试类:&lt;/p>
&lt;pre tabindex="0">&lt;code>public class Main {
public static void main(String[] args) {
// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext
ApplicationContext context = new AnnotationConfigApplicationContext(TestConfig.class);
// 如果加载spring-context.xml文件：
// ApplicationContext context = new ClassPathXmlApplicationContext(&amp;#34;spring-context.xml&amp;#34;);
//获取bean
TestBean testBean1 = (TestBean) context.getBean(&amp;#34;testBean&amp;#34;);
testBean1.sayHello();
}
}
// 结果
testconfig collection init success
TestBean sayHello...
&lt;/code>&lt;/pre>&lt;h3 id="annotationconfigapplicationcontext-注册-appcontext-类的两种方法">AnnotationConfigApplicationContext 注册 AppContext 类的两种方法&lt;/h3>
&lt;p>第一种:&lt;/p>
&lt;pre tabindex="0">&lt;code>public static void main(String[] args) {
// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext
ApplicationContext context = new AnnotationConfigApplicationContext(TestConfig.class);
//获取bean
TestBean tb = (TestBean) context.getBean(&amp;#34;testBean&amp;#34;);
tb.sayHello();
}
&lt;/code>&lt;/pre>&lt;p>第二种:&lt;/p>
&lt;pre tabindex="0">&lt;code>public class Main {
public static void main(String[] args) {
AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext();
annotationConfigApplicationContext.register(TestConfig.class);
annotationConfigApplicationContext.refresh();
}
}
&lt;/code>&lt;/pre>&lt;h3 id="configuration组合xml">@Configuration组合xml&lt;/h3>
&lt;p>配置类&lt;/p>
&lt;pre tabindex="0">&lt;code>@Configuration
@ImportResource(&amp;#34;classpath:configtest.xml&amp;#34;)
public class WebConfig {
public WebConfig(){
System.out.println(&amp;#34;WebConfig coolection init success&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;p>实体类&lt;/p>
&lt;pre tabindex="0">&lt;code>public class TestBean2 {
private String username;
private String url;
private String password;
public void setUsername(String username) {
this.username = username;
}
public void setUrl(String url) {
this.url = url;
}
public void setPassword(String password) {
this.password = password;
}
public void sayHello() {
System.out.println(&amp;#34;TestBean2 sayHello...&amp;#34;+username);
}
public void start() {
System.out.println(&amp;#34;TestBean2 init...&amp;#34;);
}
public void cleanUp() {
System.out.println(&amp;#34;TestBean2 destroy...&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;p>spring的xml配置文件&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34;
xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;
xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt;
&amp;lt;bean id=&amp;#34;testBean2&amp;#34; class=&amp;#34;com.example.demo.spring3.TestBean2&amp;#34;&amp;gt;
&amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;ranjun&amp;#34;/&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code>&lt;/pre>&lt;p>测试类&lt;/p>
&lt;pre tabindex="0">&lt;code>public class TestMain2 {
public static void main(String[] args) {
// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext
ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);
// 如果加载spring-context.xml文件：
// ApplicationContext context = new ClassPathXmlApplicationContext(&amp;#34;spring-context.xml&amp;#34;);
// 获取bean
TestBean2 tb = (TestBean2) context.getBean(&amp;#34;testBean2&amp;#34;);
tb.sayHello();
}
}
// 结果
WebConfig coolection init success
TestBean2 sayHello...ranjun
&lt;/code>&lt;/pre>&lt;h3 id="configuration组合xml和其它注解">@Configuration组合xml和其它注解&lt;/h3>
&lt;p>实体类:&lt;/p>
&lt;pre tabindex="0">&lt;code>public class TestBean {
private String username;
private String url;
private String password;
public void sayHello() {
System.out.println(&amp;#34;TestBean sayHello...&amp;#34;);
}
public void start() {
System.out.println(&amp;#34;TestBean init...&amp;#34;);
}
public void cleanup() {
System.out.println(&amp;#34;TestBean destroy...&amp;#34;);
}
}
public class TestBean2 {
private String username;
private String url;
private String password;
public void setUsername(String username) {
this.username = username;
}
public void setUrl(String url) {
this.url = url;
}
public void setPassword(String password) {
this.password = password;
}
public void sayHello() {
System.out.println(&amp;#34;TestBean2 sayHello...&amp;#34;+username);
}
public void start() {
System.out.println(&amp;#34;TestBean2 init...&amp;#34;);
}
public void cleanUp() {
System.out.println(&amp;#34;TestBean2 destroy...&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;p>配置类&lt;/p>
&lt;pre tabindex="0">&lt;code>@Configuration
public class TestConfig {
public TestConfig(){
System.out.println(&amp;#34;testconfig collection init success&amp;#34;);
}
@Bean
@Scope(&amp;#34;prototype&amp;#34;)
public TestBean testBean() {
return new TestBean();
}
}
@Configuration
@ImportResource(&amp;#34;classpath:configtest.xml&amp;#34;)
@Import(TestConfig.class)
public class WebConfig {
public WebConfig(){
System.out.println(&amp;#34;WebConfig coolection init success&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;p>测试类:&lt;/p>
&lt;pre tabindex="0">&lt;code>public class TestMain2 {
public static void main(String[] args) {
// @Configuration注解的spring容器加载方式，用AnnotationConfigApplicationContext替换ClassPathXmlApplicationContext
ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);
// 获取bean
TestBean tb = (TestBean) context.getBean(&amp;#34;testBean&amp;#34;);
tb.sayHello();
TestBean2 tb2 = (TestBean2) context.getBean(&amp;#34;testBean2&amp;#34;);
tb2.sayHello();
}
}
// 结果
WebConfig coolection init success
testconfig collection init success
TestBean sayHello...
TestBean2 sayHello...ranjun
&lt;/code>&lt;/pre></content></item><item><title>SpringBoot</title><link>/posts/springboot/</link><pubDate>Sat, 15 Jul 2023 14:58:26 +0000</pubDate><guid>/posts/springboot/</guid><description>&lt;h1 id="定时器">定时器&lt;/h1>
&lt;p>定时器的数值放到配置文件,如果使用&lt;code>@Scheduled(fixedDelay = 类中的变量)&lt;/code>这种方式试过不行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Scheduled&lt;/span>(fixedDelayString &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;${fixedDelayString}&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fixedDelayString&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">30000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="rocketmq">RocketMQ&lt;/h1>
&lt;p>下载源码或者二进制包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 源码安装&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 解压文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unzip rocketmq-all-5.2.0-source-release.zip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd rocketmq-all-5.2.0-source-release/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 编译&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mvn -Prelease-all -DskipTests -Dspotbugs.skip&lt;span style="color:#f92672">=&lt;/span>true clean install -U
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 编译后的二进制的目录,配置文件在这里&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ./distribution
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 修改配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 修改内存配置,虚拟机的内存太小了&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># vim ./bin/runserver.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>JAVA_OPT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>JAVA_OPT&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> -server -Xms512m -Xmx521m -Xmn256g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># vim ./bin/runbroker.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>JAVA_OPT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>JAVA_OPT&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> -server -Xms512m -Xmx512m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 第一步.启动Name Server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh bin/mqnamesrv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The Name Server boot success...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 第二步.启动Broker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh bin/mqbroker -n localhost:9876
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> The broker&lt;span style="color:#f92672">[&lt;/span>%s, 172.30.30.233:10911&lt;span style="color:#f92672">]&lt;/span> boot success...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试发送消息&lt;/p></description><content>&lt;h1 id="定时器">定时器&lt;/h1>
&lt;p>定时器的数值放到配置文件,如果使用&lt;code>@Scheduled(fixedDelay = 类中的变量)&lt;/code>这种方式试过不行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Scheduled&lt;/span>(fixedDelayString &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;${fixedDelayString}&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fixedDelayString&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">30000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="rocketmq">RocketMQ&lt;/h1>
&lt;p>下载源码或者二进制包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 源码安装&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 解压文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unzip rocketmq-all-5.2.0-source-release.zip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd rocketmq-all-5.2.0-source-release/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 编译&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mvn -Prelease-all -DskipTests -Dspotbugs.skip&lt;span style="color:#f92672">=&lt;/span>true clean install -U
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 编译后的二进制的目录,配置文件在这里&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ./distribution
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 修改配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 修改内存配置,虚拟机的内存太小了&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># vim ./bin/runserver.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>JAVA_OPT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>JAVA_OPT&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> -server -Xms512m -Xmx521m -Xmn256g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># vim ./bin/runbroker.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>JAVA_OPT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>JAVA_OPT&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> -server -Xms512m -Xmx512m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 第一步.启动Name Server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh bin/mqnamesrv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The Name Server boot success...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 第二步.启动Broker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh bin/mqbroker -n localhost:9876
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> The broker&lt;span style="color:#f92672">[&lt;/span>%s, 172.30.30.233:10911&lt;span style="color:#f92672">]&lt;/span> boot success...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试发送消息&lt;/p>
&lt;pre tabindex="0">&lt;code>export NAMESRV_ADDR=localhost:9876
# 发送消息
sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
# 接收消息
sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer
&lt;/code>&lt;/pre>&lt;h2 id="关闭服务">关闭服务&lt;/h2>
&lt;pre tabindex="0">&lt;code>sh bin/mqshutdown broker
sh bin/mqshutdown namesrv
&lt;/code>&lt;/pre>&lt;h2 id="监控">监控&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 记得checkout release-rocketmq-console-1.0.0分支&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/apache/rocketmq-externals/tree/release-rocketmq-console-1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 修改配置文件里的rocketMQ远程地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NameSvrAddrList &lt;span style="color:#f92672">=&lt;/span> 192.168.254.124:9876
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rocketmq.config.namesrvAddr&lt;span style="color:#f92672">=&lt;/span>192.168.254.124:9876
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="代码">代码&lt;/h2>
&lt;h3 id="单个生产者消费者">单个生产者消费者&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Provider&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DefaultMQProducer producer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DefaultMQProducer(&lt;span style="color:#e6db74">&amp;#34;group1&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> producer.&lt;span style="color:#a6e22e">setNamesrvAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.254.190:9876&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> producer.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String msg &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;什么鬼,咋莫名其妙就收到了&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Message message &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Message(&lt;span style="color:#e6db74">&amp;#34;topic1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tag1&amp;#34;&lt;/span>, msg.&lt;span style="color:#a6e22e">getBytes&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SendResult sendResult &lt;span style="color:#f92672">=&lt;/span> producer.&lt;span style="color:#a6e22e">send&lt;/span>(message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s%n&amp;#34;&lt;/span>, sendResult);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> producer.&lt;span style="color:#a6e22e">shutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Consumer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) &lt;span style="color:#66d9ef">throws&lt;/span> MQClientException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DefaultMQPushConsumer consumer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DefaultMQPushConsumer(&lt;span style="color:#e6db74">&amp;#34;group1&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">setNamesrvAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.254.190:9876&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;topic1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">registerMessageListener&lt;/span>((MessageListenerConcurrently) (list, consumeConcurrentlyContext) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 业务逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list.&lt;span style="color:#a6e22e">forEach&lt;/span>(one&lt;span style="color:#f92672">-&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> body &lt;span style="color:#f92672">=&lt;/span> one.&lt;span style="color:#a6e22e">getBody&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> String(body));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ConsumeConcurrentlyStatus.&lt;span style="color:#a6e22e">CONSUME_SUCCESS&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;消费者启起来了&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="单个生产者多个消费者">单个生产者多个消费者&lt;/h2>
&lt;h3 id="相同的topic相同的group-负载均衡">相同的Topic,相同的Group-负载均衡&lt;/h3>
&lt;p>默认就是负载均衡,多个消费者,每个人收一条信息,不重复&lt;/p>
&lt;p>&lt;img src="https://image.runtimes.cc/202404051459670.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Provider&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DefaultMQProducer producer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DefaultMQProducer(&lt;span style="color:#e6db74">&amp;#34;group2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> producer.&lt;span style="color:#a6e22e">setNamesrvAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.254.190:9876&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> producer.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> 10; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String msg &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;默认接受者是负载均衡&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Message message &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Message(&lt;span style="color:#e6db74">&amp;#34;topic2&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tag1&amp;#34;&lt;/span>, msg.&lt;span style="color:#a6e22e">getBytes&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SendResult sendResult &lt;span style="color:#f92672">=&lt;/span> producer.&lt;span style="color:#a6e22e">send&lt;/span>(message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s%n&amp;#34;&lt;/span>, sendResult);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> producer.&lt;span style="color:#a6e22e">shutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Consumer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) &lt;span style="color:#66d9ef">throws&lt;/span> MQClientException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 谁来收&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DefaultMQPushConsumer consumer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DefaultMQPushConsumer(&lt;span style="color:#e6db74">&amp;#34;group2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 从哪里收&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">setNamesrvAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.254.190:9876&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 监听队列&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;topic2&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 监听器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">registerMessageListener&lt;/span>((MessageListenerConcurrently) (list, consumeConcurrentlyContext) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 业务逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list.&lt;span style="color:#a6e22e">forEach&lt;/span>(one&lt;span style="color:#f92672">-&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> body &lt;span style="color:#f92672">=&lt;/span> one.&lt;span style="color:#a6e22e">getBody&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> String(body));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ConsumeConcurrentlyStatus.&lt;span style="color:#a6e22e">CONSUME_SUCCESS&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;消费者启起来了&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 第一个消费者&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 第二个消费者&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="相同的topic相同的group-轮训">相同的Topic,相同的Group-轮训&lt;/h3>
&lt;p>只是添加了消费者的一段代码:&lt;code>consumer.setMessageModel(MessageModel.BROADCASTING);&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://image.runtimes.cc/202404051459646.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Provider&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 谁来发&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DefaultMQProducer producer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DefaultMQProducer(&lt;span style="color:#e6db74">&amp;#34;group3&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 发给谁&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> producer.&lt;span style="color:#a6e22e">setNamesrvAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.254.190:9876&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> producer.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> 10; i&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String msg &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;默认接受者是负载均衡&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Message message &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Message(&lt;span style="color:#e6db74">&amp;#34;topic3&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;tag1&amp;#34;&lt;/span>, msg.&lt;span style="color:#a6e22e">getBytes&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SendResult sendResult &lt;span style="color:#f92672">=&lt;/span> producer.&lt;span style="color:#a6e22e">send&lt;/span>(message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s%n&amp;#34;&lt;/span>, sendResult);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> producer.&lt;span style="color:#a6e22e">shutdown&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Consumer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) &lt;span style="color:#66d9ef">throws&lt;/span> MQClientException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DefaultMQPushConsumer consumer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DefaultMQPushConsumer(&lt;span style="color:#e6db74">&amp;#34;group3&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">setNamesrvAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.254.190:9876&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;topic3&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">setMessageModel&lt;/span>(MessageModel.&lt;span style="color:#a6e22e">BROADCASTING&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 监听器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">registerMessageListener&lt;/span>((MessageListenerConcurrently) (list, consumeConcurrentlyContext) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 业务逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list.&lt;span style="color:#a6e22e">forEach&lt;/span>(one&lt;span style="color:#f92672">-&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> body &lt;span style="color:#f92672">=&lt;/span> one.&lt;span style="color:#a6e22e">getBody&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> String(body));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ConsumeConcurrentlyStatus.&lt;span style="color:#a6e22e">CONSUME_SUCCESS&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;消费者启起来了&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 两个消费者都是收到相同的消息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="不同的topic不同的group">不同的Topic,不同的Group&lt;/h3>
&lt;p>&lt;img src="https://image.runtimes.cc/202404051459641.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 消费者1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Consumer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) &lt;span style="color:#66d9ef">throws&lt;/span> MQClientException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DefaultMQPushConsumer consumer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DefaultMQPushConsumer(&lt;span style="color:#e6db74">&amp;#34;group4&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">setNamesrvAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.254.190:9876&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;topic4&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 监听器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">registerMessageListener&lt;/span>((MessageListenerConcurrently) (list, consumeConcurrentlyContext) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 业务逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list.&lt;span style="color:#a6e22e">forEach&lt;/span>(one&lt;span style="color:#f92672">-&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> body &lt;span style="color:#f92672">=&lt;/span> one.&lt;span style="color:#a6e22e">getBody&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> String(body));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ConsumeConcurrentlyStatus.&lt;span style="color:#a6e22e">CONSUME_SUCCESS&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;消费者启起来了&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 消费者2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Consumer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) &lt;span style="color:#66d9ef">throws&lt;/span> MQClientException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DefaultMQPushConsumer consumer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DefaultMQPushConsumer(&lt;span style="color:#e6db74">&amp;#34;group4&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">setNamesrvAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.254.190:9876&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;topic4&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 监听器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">registerMessageListener&lt;/span>((MessageListenerConcurrently) (list, consumeConcurrentlyContext) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 业务逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list.&lt;span style="color:#a6e22e">forEach&lt;/span>(one&lt;span style="color:#f92672">-&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> body &lt;span style="color:#f92672">=&lt;/span> one.&lt;span style="color:#a6e22e">getBody&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> String(body));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ConsumeConcurrentlyStatus.&lt;span style="color:#a6e22e">CONSUME_SUCCESS&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;消费者启起来了&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 消费者3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Consumer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) &lt;span style="color:#66d9ef">throws&lt;/span> MQClientException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DefaultMQPushConsumer consumer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DefaultMQPushConsumer(&lt;span style="color:#e6db74">&amp;#34;group4-1&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">setNamesrvAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.254.190:9876&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;topic4&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 监听器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">registerMessageListener&lt;/span>((MessageListenerConcurrently) (list, consumeConcurrentlyContext) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 业务逻辑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list.&lt;span style="color:#a6e22e">forEach&lt;/span>(one&lt;span style="color:#f92672">-&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> body &lt;span style="color:#f92672">=&lt;/span> one.&lt;span style="color:#a6e22e">getBody&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> String(body));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ConsumeConcurrentlyStatus.&lt;span style="color:#a6e22e">CONSUME_SUCCESS&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;消费者启起来了&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 消费者1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 消费者2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 消费者3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>默认接受者是负载均衡9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="swagger">Swagger&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!-- 引入Swagger3依赖 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>io.springfox&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>springfox-boot-starter&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>3.0.0&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> io.swagger.annotations.ApiOperation;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.context.annotation.Bean;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.context.annotation.Configuration;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> springfox.documentation.builders.ApiInfoBuilder;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> springfox.documentation.builders.PathSelectors;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> springfox.documentation.builders.RequestHandlerSelectors;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> springfox.documentation.oas.annotations.EnableOpenApi;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> springfox.documentation.service.ApiInfo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> springfox.documentation.service.Contact;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> springfox.documentation.spi.DocumentationType;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> springfox.documentation.spring.web.plugins.Docket;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Swagger配置类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@EnableOpenApi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SwaggerConfig&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Docket &lt;span style="color:#a6e22e">docket&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Docket(DocumentationType.&lt;span style="color:#a6e22e">OAS_30&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">apiInfo&lt;/span>(apiInfo()).&lt;span style="color:#a6e22e">enable&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">select&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//apis： 添加swagger接口提取范围&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">apis&lt;/span>(RequestHandlerSelectors.&lt;span style="color:#a6e22e">basePackage&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;com.example.study.controller&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">apis&lt;/span>(RequestHandlerSelectors.&lt;span style="color:#a6e22e">withMethodAnnotation&lt;/span>(ApiOperation.&lt;span style="color:#a6e22e">class&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">paths&lt;/span>(PathSelectors.&lt;span style="color:#a6e22e">any&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> ApiInfo &lt;span style="color:#a6e22e">apiInfo&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ApiInfoBuilder()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">title&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;XX项目接口文档&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">description&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;XX项目描述&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">contact&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> Contact(&lt;span style="color:#e6db74">&amp;#34;作者&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;作者URL&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;作者Email&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">version&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">build&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 原因是在springboot 2.6.0中将SpringMVC 默认路径匹配策略从AntPathMatcher&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 更改为PathPatternParser，导致出错，解决办法是切换回原先的AntPathMatcher&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spring.mvc.pathmatch.matching-strategy=ant_path_matcher
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="knife4j">knife4j&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>com.github.xiaoymin&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>knife4j-spring-boot-starter&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>3.0.3&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>application.properties&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>spring.mvc.pathmatch.matching-strategy=ant_path_matcher
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>knife4j.enable: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Api&lt;/span>(tags &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;测试2&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 排序&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@ApiSort&lt;/span>(value &lt;span style="color:#f92672">=&lt;/span> 1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestController2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/3&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ApiOperation&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">method&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello wolrd&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ApiOperation&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;4&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">method2&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello wolrd&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="log4j2">Log4j2&lt;/h1>
&lt;h2 id="log4j2-1">Log4j2&lt;/h2>
&lt;p>日志所有级别级别从上到下 ,级别从低到高,报错(更重要)这种,级别最高,info,debug相对不怎么重要&lt;/p>
&lt;ul>
&lt;li>all&lt;/li>
&lt;li>trace&lt;/li>
&lt;li>debug&lt;/li>
&lt;li>info&lt;/li>
&lt;li>warn&lt;/li>
&lt;li>error&lt;/li>
&lt;li>fail&lt;/li>
&lt;/ul>
&lt;p>Log4j2.xml配置例子&lt;/p>
&lt;p>{% tabs Log4j2 %}&lt;/p>
&lt;!-- tab 抄网上的示例 -->
&lt;pre tabindex="0">&lt;code>info级别输出到info.log
warn级别输出warn.log
error级别输出到error.log
debug级别输出到debug.log
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--&amp;lt;Configuration status=&amp;#34;WARN&amp;#34; monitorInterval=&amp;#34;30&amp;#34;&amp;gt; --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;property&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;LOG_HOME&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>./service-logs&lt;span style="color:#f92672">&amp;lt;/property&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Appenders&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--*********************控制台日志***********************--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Console&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;consoleAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">target=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;SYSTEM_OUT&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志格式及颜色--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pattern=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%style{%d{ISO8601}}{bright,green} %highlight{%-5level} [%style{%t}{bright,blue}] %style{%C{}}{bright,yellow}: %msg%n%style{%throwable}{red}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">disableAnsi=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">noConsoleNoAnsi=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Console&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--*********************文件日志***********************--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--all级别日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RollingFile&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;allFileAppender&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fileName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/all.log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filePattern=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/$${date:yyyy-MM}/all-%d{yyyy-MM-dd}-%i.log.gz&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志格式--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;pattern&amp;gt;&lt;/span>%d %p %C{} [%t] %m%n&lt;span style="color:#f92672">&amp;lt;/pattern&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/PatternLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 设置日志文件切分参数 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--&amp;lt;OnStartupTriggeringPolicy/&amp;gt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;SizeBasedTriggeringPolicy&lt;/span> &lt;span style="color:#a6e22e">size=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100 MB&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TimeBasedTriggeringPolicy/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DefaultRolloverStrategy&lt;/span> &lt;span style="color:#a6e22e">max=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/RollingFile&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--debug级别日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RollingFile&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;debugFileAppender&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fileName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/debug.log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filePattern=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/$${date:yyyy-MM}/debug-%d{yyyy-MM-dd}-%i.log.gz&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--过滤掉info及更高级别日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ThresholdFilter&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;info&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DENY&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMismatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;NEUTRAL&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志格式--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;pattern&amp;gt;&lt;/span>%d %p %C{} [%t] %m%n&lt;span style="color:#f92672">&amp;lt;/pattern&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/PatternLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 设置日志文件切分参数 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--&amp;lt;OnStartupTriggeringPolicy/&amp;gt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;SizeBasedTriggeringPolicy&lt;/span> &lt;span style="color:#a6e22e">size=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100 MB&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TimeBasedTriggeringPolicy/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DefaultRolloverStrategy&lt;/span> &lt;span style="color:#a6e22e">max=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/RollingFile&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--info级别日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RollingFile&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;infoFileAppender&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fileName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/info.log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filePattern=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--过滤掉warn及更高级别日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ThresholdFilter&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;warn&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DENY&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMismatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;NEUTRAL&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志格式--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;pattern&amp;gt;&lt;/span>%d %p %C{} [%t] %m%n&lt;span style="color:#f92672">&amp;lt;/pattern&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/PatternLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 设置日志文件切分参数 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--&amp;lt;OnStartupTriggeringPolicy/&amp;gt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;SizeBasedTriggeringPolicy&lt;/span> &lt;span style="color:#a6e22e">size=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100 MB&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TimeBasedTriggeringPolicy&lt;/span> &lt;span style="color:#a6e22e">interval=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">modulate=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--&amp;lt;DefaultRolloverStrategy max=&amp;#34;100&amp;#34;/&amp;gt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/RollingFile&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--warn级别日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RollingFile&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;warnFileAppender&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fileName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/warn.log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filePattern=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--过滤掉error及更高级别日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ThresholdFilter&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DENY&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMismatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;NEUTRAL&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志格式--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;pattern&amp;gt;&lt;/span>%d %p %C{} [%t] %m%n&lt;span style="color:#f92672">&amp;lt;/pattern&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/PatternLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 设置日志文件切分参数 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--&amp;lt;OnStartupTriggeringPolicy/&amp;gt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;SizeBasedTriggeringPolicy&lt;/span> &lt;span style="color:#a6e22e">size=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100 MB&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TimeBasedTriggeringPolicy/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DefaultRolloverStrategy&lt;/span> &lt;span style="color:#a6e22e">max=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/RollingFile&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--error及更高级别日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RollingFile&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;errorFileAppender&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fileName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/error.log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filePattern=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志格式--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;pattern&amp;gt;&lt;/span>%d %p %C{} [%t] %m%n&lt;span style="color:#f92672">&amp;lt;/pattern&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/PatternLayout&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 设置日志文件切分参数 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--&amp;lt;OnStartupTriggeringPolicy/&amp;gt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志基础文件大小，超过该大小就触发日志文件滚动更新--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;SizeBasedTriggeringPolicy&lt;/span> &lt;span style="color:#a6e22e">size=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100 MB&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志文件滚动更新的时间，依赖于文件命名filePattern的设置--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TimeBasedTriggeringPolicy/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--设置日志的文件个数上限，不设置默认为7个，超过大小后会被覆盖；依赖于filePattern中的%i--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DefaultRolloverStrategy&lt;/span> &lt;span style="color:#a6e22e">max=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/RollingFile&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--json格式error级别日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;RollingFile&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;errorJsonAppender&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fileName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/error-json.log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filePattern=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;${LOG_HOME}/error-json-%d{yyyy-MM-dd}-%i.log.gz&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;JSONLayout&lt;/span> &lt;span style="color:#a6e22e">compact=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">eventEol=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">locationInfo=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;SizeBasedTriggeringPolicy&lt;/span> &lt;span style="color:#a6e22e">size=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100 MB&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TimeBasedTriggeringPolicy&lt;/span> &lt;span style="color:#a6e22e">interval=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">modulate=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Policies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/RollingFile&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Appenders&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Loggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 根日志设置 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Root&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#a6e22e">ref=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;allFileAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;all&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#a6e22e">ref=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;consoleAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#a6e22e">ref=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;debugFileAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#a6e22e">ref=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;infoFileAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;info&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#a6e22e">ref=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;warnFileAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;warn&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#a6e22e">ref=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;errorFileAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#a6e22e">ref=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;errorJsonAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Root&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--spring日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Logger&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;org.springframework&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--druid数据源日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Logger&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;druid.sql.Statement&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;warn&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- mybatis日志 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Logger&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;com.mybatis&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;warn&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Logger&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;org.hibernate&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;warn&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Logger&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;com.zaxxer.hikari&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;info&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Logger&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;org.quartz&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;info&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Logger&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;com.andya.demo&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Loggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- endtab -->
&lt;!-- tab 实际开发用的-->
&lt;pre tabindex="0">&lt;code>error级别 打印error.log
info级别 打印info,error 日志到info.log
debug级别 打印info,error,debug日志到debug.log
&lt;/code>&lt;/pre>&lt;!-- endtab -->
&lt;p>{% endtabs %}&lt;/p>
&lt;p>基本结构是:&lt;/p>
&lt;ul>
&lt;li>Configuration
&lt;ul>
&lt;li>properties 属性配置,可以在这里配置全局变量,可以在xml别的地方引入&lt;/li>
&lt;li>Appenders 具体配置日志框架该如何收集日志的动作
&lt;ul>
&lt;li>Console 控制台输出&lt;/li>
&lt;li>RollingFile 滚动日志文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Loggers
&lt;ul>
&lt;li>Root 理论上只有一个Root,level属性,是全局日志级别,如果AppenderRef没有配置level,就使用全局级别
&lt;ul>
&lt;li>AppenderRef 引用具体配置的动作,level 没有的话,就使用全局级别,就像&lt;code>CSS&lt;/code>属性那样,标签里的属性优先级最高&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Logger 单独配置一些类,level 没有的话,就使用全局级别,就像&lt;code>CSS&lt;/code>属性那样,标签里的属性优先级最高&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>过滤器的具体使用方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!--过滤掉info及更高级别日志--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ThresholdFilter&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;info&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DENY&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMismatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;NEUTRAL&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>level&lt;/code>指定日志等级的阈值。&lt;/p>
&lt;p>&lt;code>onMatch&lt;/code> 定义当日志事件等级等于或高于 &lt;code>level&lt;/code> 属性指定的等级时的行为。&lt;/p>
&lt;ul>
&lt;li>&lt;code>ACCEPT&lt;/code>：接受日志事件，让它通过过滤器。&lt;/li>
&lt;li>&lt;code>DENY&lt;/code>：拒绝日志事件，不让它通过过滤器。&lt;/li>
&lt;li>&lt;code>NEUTRAL&lt;/code>：对日志事件不做决定，继续应用其他的过滤规则。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>onMismatch&lt;/code> 定义当日志事件等级低于 &lt;code>level&lt;/code> 属性指定的等级时的行为。&lt;/p>
&lt;ul>
&lt;li>&lt;code>ACCEPT&lt;/code>：接受日志事件，让它通过过滤器。&lt;/li>
&lt;li>&lt;code>DENY&lt;/code>：拒绝日志事件，不让它通过过滤器。&lt;/li>
&lt;li>&lt;code>NEUTRAL&lt;/code>：对日志事件不做决定，继续应用其他的过滤规则。&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>if 日志的级别 &amp;gt;= level配置的级别
ACCEPT 接受日志
DENY 拒绝日志
NEUTRAL 对日志事件不做决定，继续应用其他的过滤规则
if 日志的级别 &amp;lt; level配置的级别
ACCEPT 接受日志
DENY 拒绝日志
NEUTRAL 对日志事件不做决定，继续应用其他的过滤规则
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>还是没有搞清楚 onMismatch=&amp;ldquo;NEUTRAL&amp;rdquo; 的作用是怎样的&lt;/p>
&lt;p>使用ChatGPT提供的demo,没有验证&lt;/p>
&lt;p>info级别 记录到info.log
error级别 记录到error.log
info级别和error级别 记录到dev.log&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Appenders&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- Info 级别日志的 Appender --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;File&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;InfoAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">fileName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;logs/info.log&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ThresholdFilter&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;INFO&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ACCEPT&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMismatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DENY&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&lt;/span> &lt;span style="color:#a6e22e">pattern=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %logger{36} - %msg%n&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/File&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- Error 级别日志的 Appender --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;File&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ErrorAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">fileName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;logs/error.log&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ThresholdFilter&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ERROR&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ACCEPT&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMismatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DENY&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&lt;/span> &lt;span style="color:#a6e22e">pattern=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %logger{36} - %msg%n&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/File&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 同时记录 Info 和 Error 级别日志的 Appender --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;File&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DevAppender&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">fileName=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;logs/dev.log&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ThresholdFilter&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;INFO&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ACCEPT&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMismatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DENY&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ThresholdFilter&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ERROR&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ACCEPT&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onMismatch=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;NEUTRAL&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;PatternLayout&lt;/span> &lt;span style="color:#a6e22e">pattern=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %logger{36} - %msg%n&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/File&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Appenders&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Loggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Root&lt;/span> &lt;span style="color:#a6e22e">level=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DEBUG&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#a6e22e">ref=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;InfoAppender&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#a6e22e">ref=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ErrorAppender&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;AppenderRef&lt;/span> &lt;span style="color:#a6e22e">ref=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;DevAppender&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Root&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Loggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h2 id="只是引入web框架">只是引入web框架&lt;/h2>
&lt;p>只是引入web框架&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-web&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@GetMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">test&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 格式化当前日期时间&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String formattedDateTime &lt;span style="color:#f92672">=&lt;/span> LocalDateTime.&lt;span style="color:#a6e22e">now&lt;/span>().&lt;span style="color:#a6e22e">format&lt;/span>(DateTimeFormatter.&lt;span style="color:#a6e22e">ofPattern&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;当前日期时间：{}&amp;#34;&lt;/span>, formattedDateTime);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;当前日期时间：{}&amp;#34;&lt;/span>, formattedDateTime);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;当前日期时间：{}&amp;#34;&lt;/span>, formattedDateTime);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">warn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;当前日期时间：{}&amp;#34;&lt;/span>, formattedDateTime);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#a6e22e">trace&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;当前日期时间：{}&amp;#34;&lt;/span>, formattedDateTime);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> formattedDateTime;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 控制台打印&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO &lt;span style="color:#ae81ff">64710&lt;/span> --- &lt;span style="color:#f92672">[&lt;/span>nio-8080-exec-1&lt;span style="color:#f92672">]&lt;/span> c.e.s.controller.IndexController : 当前日期时间：2024-03-03 21:37:40
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ERROR &lt;span style="color:#ae81ff">64710&lt;/span> --- &lt;span style="color:#f92672">[&lt;/span>nio-8080-exec-1&lt;span style="color:#f92672">]&lt;/span> c.e.s.controller.IndexController : 当前日期时间：2024-03-03 21:37:40
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARN &lt;span style="color:#ae81ff">64710&lt;/span> --- &lt;span style="color:#f92672">[&lt;/span>nio-8080-exec-1&lt;span style="color:#f92672">]&lt;/span> c.e.s.controller.IndexController : 当前日期时间：2024-03-03 21:37:40
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 为什么控制台没有打印 trace和debug日志&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Spring Security</title><link>/posts/spring-security/</link><pubDate>Sat, 19 Nov 2022 18:25:00 +0000</pubDate><guid>/posts/spring-security/</guid><description>&lt;h1 id="spring-security">Spring Security&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;lt;dependency&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/dependency&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>登录业务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LoginService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, RedisUser&lt;span style="color:#f92672">&amp;gt;&lt;/span> map &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AuthenticationManager authenticationManager;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">login&lt;/span>(SysUser sysUser) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// AuthenticationManager 进行用户认证&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> UsernamePasswordAuthenticationToken(sysUser.&lt;span style="color:#a6e22e">getUsername&lt;/span>(), sysUser.&lt;span style="color:#a6e22e">getPassword&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Authentication authenticate &lt;span style="color:#f92672">=&lt;/span> authenticationManager.&lt;span style="color:#a6e22e">authenticate&lt;/span>(usernamePasswordAuthenticationToken);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果认证不通过,给出对应的提示&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (Objects.&lt;span style="color:#a6e22e">isNull&lt;/span>(authenticate)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RuntimeException(&lt;span style="color:#e6db74">&amp;#34;登录失败&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果认证通过,使用username给jwt生成一个&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RedisUser principal &lt;span style="color:#f92672">=&lt;/span> (RedisUser) authenticate.&lt;span style="color:#a6e22e">getPrincipal&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.&lt;span style="color:#a6e22e">put&lt;/span>(principal.&lt;span style="color:#a6e22e">getUsername&lt;/span>(), principal);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> createJWT(&lt;span style="color:#e6db74">&amp;#34;1234567&amp;#34;&lt;/span>, 9990000, principal.&lt;span style="color:#a6e22e">getUsername&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">logout&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UsernamePasswordAuthenticationToken authentication &lt;span style="color:#f92672">=&lt;/span> (UsernamePasswordAuthenticationToken) SecurityContextHolder.&lt;span style="color:#a6e22e">getContext&lt;/span>().&lt;span style="color:#a6e22e">getAuthentication&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RedisUser principal &lt;span style="color:#f92672">=&lt;/span> (RedisUser) authentication.&lt;span style="color:#a6e22e">getPrincipal&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String username &lt;span style="color:#f92672">=&lt;/span> principal.&lt;span style="color:#a6e22e">getUsername&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 从redis里删除&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.&lt;span style="color:#a6e22e">remove&lt;/span>(username);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LoginController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LoginService loginService;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user/login&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ResponseEntity&lt;span style="color:#f92672">&amp;lt;&lt;/span>HashMap&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">login&lt;/span>(&lt;span style="color:#a6e22e">@RequestParam&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>) String username,&lt;span style="color:#a6e22e">@RequestParam&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;password&amp;#34;&lt;/span>) String password){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SysUser sysUser &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> SysUser();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sysUser.&lt;span style="color:#a6e22e">setUsername&lt;/span>(username);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sysUser.&lt;span style="color:#a6e22e">setPassword&lt;/span>(password);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HashMap&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, Object&lt;span style="color:#f92672">&amp;gt;&lt;/span> stringObjectHashMap &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringObjectHashMap.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;token&amp;#34;&lt;/span>, loginService.&lt;span style="color:#a6e22e">login&lt;/span>(sysUser));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ResponseEntity.&lt;span style="color:#a6e22e">status&lt;/span>(200).&lt;span style="color:#a6e22e">body&lt;/span>(stringObjectHashMap);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user/logout&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ResponseEntity&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">logout&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loginService.&lt;span style="color:#a6e22e">logout&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ResponseEntity.&lt;span style="color:#a6e22e">ok&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>验证账户&lt;/p></description><content>&lt;h1 id="spring-security">Spring Security&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;lt;dependency&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/dependency&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>登录业务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LoginService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, RedisUser&lt;span style="color:#f92672">&amp;gt;&lt;/span> map &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AuthenticationManager authenticationManager;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">login&lt;/span>(SysUser sysUser) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// AuthenticationManager 进行用户认证&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> UsernamePasswordAuthenticationToken(sysUser.&lt;span style="color:#a6e22e">getUsername&lt;/span>(), sysUser.&lt;span style="color:#a6e22e">getPassword&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Authentication authenticate &lt;span style="color:#f92672">=&lt;/span> authenticationManager.&lt;span style="color:#a6e22e">authenticate&lt;/span>(usernamePasswordAuthenticationToken);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果认证不通过,给出对应的提示&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (Objects.&lt;span style="color:#a6e22e">isNull&lt;/span>(authenticate)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RuntimeException(&lt;span style="color:#e6db74">&amp;#34;登录失败&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果认证通过,使用username给jwt生成一个&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RedisUser principal &lt;span style="color:#f92672">=&lt;/span> (RedisUser) authenticate.&lt;span style="color:#a6e22e">getPrincipal&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.&lt;span style="color:#a6e22e">put&lt;/span>(principal.&lt;span style="color:#a6e22e">getUsername&lt;/span>(), principal);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> createJWT(&lt;span style="color:#e6db74">&amp;#34;1234567&amp;#34;&lt;/span>, 9990000, principal.&lt;span style="color:#a6e22e">getUsername&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">logout&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UsernamePasswordAuthenticationToken authentication &lt;span style="color:#f92672">=&lt;/span> (UsernamePasswordAuthenticationToken) SecurityContextHolder.&lt;span style="color:#a6e22e">getContext&lt;/span>().&lt;span style="color:#a6e22e">getAuthentication&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RedisUser principal &lt;span style="color:#f92672">=&lt;/span> (RedisUser) authentication.&lt;span style="color:#a6e22e">getPrincipal&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String username &lt;span style="color:#f92672">=&lt;/span> principal.&lt;span style="color:#a6e22e">getUsername&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 从redis里删除&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.&lt;span style="color:#a6e22e">remove&lt;/span>(username);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LoginController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LoginService loginService;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user/login&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ResponseEntity&lt;span style="color:#f92672">&amp;lt;&lt;/span>HashMap&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">login&lt;/span>(&lt;span style="color:#a6e22e">@RequestParam&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>) String username,&lt;span style="color:#a6e22e">@RequestParam&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;password&amp;#34;&lt;/span>) String password){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SysUser sysUser &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> SysUser();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sysUser.&lt;span style="color:#a6e22e">setUsername&lt;/span>(username);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sysUser.&lt;span style="color:#a6e22e">setPassword&lt;/span>(password);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HashMap&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, Object&lt;span style="color:#f92672">&amp;gt;&lt;/span> stringObjectHashMap &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringObjectHashMap.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;token&amp;#34;&lt;/span>, loginService.&lt;span style="color:#a6e22e">login&lt;/span>(sysUser));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ResponseEntity.&lt;span style="color:#a6e22e">status&lt;/span>(200).&lt;span style="color:#a6e22e">body&lt;/span>(stringObjectHashMap);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user/logout&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ResponseEntity&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">logout&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loginService.&lt;span style="color:#a6e22e">logout&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ResponseEntity.&lt;span style="color:#a6e22e">ok&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;success&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>验证账户&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.example.spirngsecutirylearn.pojo.RedisUser;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.example.spirngsecutirylearn.pojo.SysUser;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.core.userdetails.UserDetails;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.core.userdetails.UserDetailsService;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.core.userdetails.UsernameNotFoundException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.stereotype.Service;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.ArrayList;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestService&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> UserDetailsService {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> String user &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;anthony&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> String password &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;$2a$10$yyR9WuT9JY/bpe1VPU0yguqlv0lWpgzTD9NEetf2.n8y7NXIa1rfm&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * DaoAuthenticationProvier 会调用这个方法查询用户,并且返回UserDetails对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @param username
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @throws UsernameNotFoundException
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> UserDetails &lt;span style="color:#a6e22e">loadUserByUsername&lt;/span>(String username) &lt;span style="color:#66d9ef">throws&lt;/span> UsernameNotFoundException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 从数据库查询用户信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SysUser sysUser &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> SysUser();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (username.&lt;span style="color:#a6e22e">equals&lt;/span>(user)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sysUser.&lt;span style="color:#a6e22e">setUsername&lt;/span>(user);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sysUser.&lt;span style="color:#a6e22e">setPassword&lt;/span>(password);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 没有查到用户&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RuntimeException(&lt;span style="color:#e6db74">&amp;#34;没有查到用户信息&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 查询对应的权限信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> strings &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// strings.add(&amp;#34;test&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strings.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;admin&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 返回封装的信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RedisUser(sysUser,strings);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>缓存的用户对象&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> com.example.spirngsecutirylearn.pojo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> lombok.AllArgsConstructor;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> lombok.Data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.core.GrantedAuthority;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.core.authority.SimpleGrantedAuthority;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.core.userdetails.UserDetails;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Collection;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.List;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.stream.Collectors;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RedisUser&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> UserDetails {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SysUser sysUser;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> list;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">RedisUser&lt;/span>(SysUser sysUser, List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> list) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">sysUser&lt;/span> &lt;span style="color:#f92672">=&lt;/span> sysUser;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">list&lt;/span> &lt;span style="color:#f92672">=&lt;/span> list;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 权限
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Collection&lt;span style="color:#f92672">&amp;lt;?&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> GrantedAuthority&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">getAuthorities&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> list.&lt;span style="color:#a6e22e">stream&lt;/span>().&lt;span style="color:#a6e22e">map&lt;/span>(SimpleGrantedAuthority::&lt;span style="color:#66d9ef">new&lt;/span>).&lt;span style="color:#a6e22e">collect&lt;/span>(Collectors.&lt;span style="color:#a6e22e">toList&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getPassword&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sysUser.&lt;span style="color:#a6e22e">getPassword&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getUsername&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sysUser.&lt;span style="color:#a6e22e">getUsername&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">isAccountNonExpired&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">isAccountNonLocked&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">isCredentialsNonExpired&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">isEnabled&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>认证失败的回调&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> com.example.spirngsecutirylearn.handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> cn.hutool.json.JSONUtil;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.http.ResponseEntity;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.core.AuthenticationException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.web.AuthenticationEntryPoint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.stereotype.Component;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> javax.servlet.ServletException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> javax.servlet.http.HttpServletRequest;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> javax.servlet.http.HttpServletResponse;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.io.IOException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AuthException&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> AuthenticationEntryPoint {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">commence&lt;/span>(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) &lt;span style="color:#66d9ef">throws&lt;/span> IOException, ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ResponseEntity&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> responseEntity &lt;span style="color:#f92672">=&lt;/span> ResponseEntity.&lt;span style="color:#a6e22e">ok&lt;/span>().&lt;span style="color:#a6e22e">body&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;认证失败,请重新登录&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String str &lt;span style="color:#f92672">=&lt;/span> JSONUtil.&lt;span style="color:#a6e22e">toJsonStr&lt;/span>(responseEntity);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/// 处理异常&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extracted(response,str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">extracted&lt;/span>(HttpServletResponse response,String string) &lt;span style="color:#66d9ef">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">setStatus&lt;/span>(200);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">setContentType&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">setCharacterEncoding&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">getWriter&lt;/span>().&lt;span style="color:#a6e22e">println&lt;/span>(string);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>授权失败的回调&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> com.example.spirngsecutirylearn.handler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> cn.hutool.json.JSONUtil;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.http.ResponseEntity;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.access.AccessDeniedException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.core.AuthenticationException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.web.AuthenticationEntryPoint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.web.access.AccessDeniedHandler;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.stereotype.Component;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> javax.servlet.ServletException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> javax.servlet.http.HttpServletRequest;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> javax.servlet.http.HttpServletResponse;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.io.IOException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AccessException&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> AccessDeniedHandler {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">handle&lt;/span>(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) &lt;span style="color:#66d9ef">throws&lt;/span> IOException, ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ResponseEntity&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> responseEntity &lt;span style="color:#f92672">=&lt;/span> ResponseEntity.&lt;span style="color:#a6e22e">ok&lt;/span>().&lt;span style="color:#a6e22e">body&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;权限不租&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String str &lt;span style="color:#f92672">=&lt;/span> JSONUtil.&lt;span style="color:#a6e22e">toJsonStr&lt;/span>(responseEntity);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/// 处理异常&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extracted(response,str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">extracted&lt;/span>(HttpServletResponse response,String string) &lt;span style="color:#66d9ef">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">setStatus&lt;/span>(200);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">setContentType&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">setCharacterEncoding&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#a6e22e">getWriter&lt;/span>().&lt;span style="color:#a6e22e">println&lt;/span>(string);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>开启注解权限控制和自定义注解&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/test&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestController&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/hello&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@PreAuthorize&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;hasAnyAuthority(&amp;#39;test&amp;#39;)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ResponseEntity&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">hello&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ResponseEntity.&lt;span style="color:#a6e22e">ok&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;hello server&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 自定义校验权限
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/hello2&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@PreAuthorize&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;@anthony.hasAnyAuthority(&amp;#39;test&amp;#39;)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> ResponseEntity&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">hello2&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ResponseEntity.&lt;span style="color:#a6e22e">ok&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;hello server2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> com.example.spirngsecutirylearn.cofig;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.example.spirngsecutirylearn.filter.JwtFilter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.example.spirngsecutirylearn.handler.AccessException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> com.example.spirngsecutirylearn.handler.AuthException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.context.annotation.Bean;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.context.annotation.Configuration;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.http.HttpMethod;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.authentication.AuthenticationManager;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.config.annotation.authentication.configuration.EnableGlobalAuthentication;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.config.annotation.web.builders.HttpSecurity;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.config.http.SessionCreationPolicy;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.crypto.password.PasswordEncoder;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.springframework.security.web.authentication.logout.LogoutFilter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> javax.annotation.Resource;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@EnableGlobalMethodSecurity&lt;/span>(prePostEnabled &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SecurityConfig&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> WebSecurityConfigurerAdapter {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JwtFilter jwtFilter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AuthException authException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Resource&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AccessException accessException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> AuthenticationManager &lt;span style="color:#a6e22e">authenticationManagerBean&lt;/span>() &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">authenticationManagerBean&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">configure&lt;/span>(HttpSecurity httpSecurity) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> httpSecurity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// CSRF禁用，因为不使用session&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">csrf&lt;/span>().&lt;span style="color:#a6e22e">disable&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 基于token，所以不需要session&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">sessionManagement&lt;/span>().&lt;span style="color:#a6e22e">sessionCreationPolicy&lt;/span>(SessionCreationPolicy.&lt;span style="color:#a6e22e">STATELESS&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">and&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 过滤请求&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">authorizeRequests&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 对于登录login 注册register 验证码captchaImage 允许匿名访问&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">antMatchers&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/user/login&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">anonymous&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 静态资源，permitAll 有没有登录都访问&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// .antMatchers(HttpMethod.GET, &amp;#34;/&amp;#34;, &amp;#34;/*.html&amp;#34;, &amp;#34;/**/*.html&amp;#34;, &amp;#34;/**/*.css&amp;#34;, &amp;#34;/**/*.js&amp;#34;, &amp;#34;/profile/**&amp;#34;).permitAll()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// .antMatchers(&amp;#34;/swagger-ui.html&amp;#34;, &amp;#34;/swagger-resources/**&amp;#34;, &amp;#34;/webjars/**&amp;#34;, &amp;#34;/*/api-docs&amp;#34;, &amp;#34;/druid/**&amp;#34;).permitAll()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 除上面外的所有请求全部需要鉴权认证&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">anyRequest&lt;/span>().&lt;span style="color:#a6e22e">authenticated&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// .and()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// .headers().frameOptions().disable();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 添加Logout filter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// httpSecurity.logout().logoutUrl(&amp;#34;/logout&amp;#34;).logoutSuccessHandler(logoutSuccessHandler);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// // 添加JWT filter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> httpSecurity.&lt;span style="color:#a6e22e">addFilterBefore&lt;/span>(jwtFilter, UsernamePasswordAuthenticationFilter.&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// // 添加CORS filter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 添加自定义的认证和授权的自定义失败处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> httpSecurity.&lt;span style="color:#a6e22e">exceptionHandling&lt;/span>().&lt;span style="color:#a6e22e">authenticationEntryPoint&lt;/span>(authException).&lt;span style="color:#a6e22e">accessDeniedHandler&lt;/span>(accessException);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> httpSecurity.&lt;span style="color:#a6e22e">cors&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 密码加密的规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> PasswordEncoder &lt;span style="color:#a6e22e">passwordEncoder&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> BCryptPasswordEncoder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * BCryptPasswordEncoder 的测试方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @param args
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BCryptPasswordEncoder bCryptPasswordEncoder &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> BCryptPasswordEncoder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 加密&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String encode &lt;span style="color:#f92672">=&lt;/span> bCryptPasswordEncoder.&lt;span style="color:#a6e22e">encode&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;123456&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(encode);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 解密&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">boolean&lt;/span> matches &lt;span style="color:#f92672">=&lt;/span> bCryptPasswordEncoder.&lt;span style="color:#a6e22e">matches&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;123456&amp;#34;&lt;/span>, encode);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(matches);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>自定义注解&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;anthony&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestExpress&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">hasAnyAuthority&lt;/span>(String authority){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Authentication authentication &lt;span style="color:#f92672">=&lt;/span> SecurityContextHolder.&lt;span style="color:#a6e22e">getContext&lt;/span>().&lt;span style="color:#a6e22e">getAuthentication&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RedisUser principal &lt;span style="color:#f92672">=&lt;/span> (RedisUser) authentication.&lt;span style="color:#a6e22e">getPrincipal&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// List&amp;lt;String&amp;gt; list = (List&amp;lt;String&amp;gt;)principal.getAuthorities();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>SimpleGrantedAuthority&lt;span style="color:#f92672">&amp;gt;&lt;/span> authorities &lt;span style="color:#f92672">=&lt;/span> (List&lt;span style="color:#f92672">&amp;lt;&lt;/span>SimpleGrantedAuthority&lt;span style="color:#f92672">&amp;gt;&lt;/span>) principal.&lt;span style="color:#a6e22e">getAuthorities&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (SimpleGrantedAuthority simpleGrantedAuthority : authorities) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (simpleGrantedAuthority.&lt;span style="color:#a6e22e">getAuthority&lt;/span>().&lt;span style="color:#a6e22e">equals&lt;/span>(authority)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>找Java包的路径&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># mac&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/libexec/java_home -V
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>