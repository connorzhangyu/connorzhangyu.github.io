<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Hello World</title><link>/tags/git/</link><description>Recent content in Git on Hello World</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sat, 19 Nov 2022 18:25:00 +0000</lastBuildDate><atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git</title><link>/posts/git/</link><pubDate>Sat, 19 Nov 2022 18:25:00 +0000</pubDate><guid>/posts/git/</guid><description>&lt;h1 id="分支管理">分支管理&lt;/h1>
&lt;h2 id="切一个新的本地分支">切一个新的本地分支&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 先切换到需要复制的分支,比如想从prod分支,切一个新的分支&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout prod &lt;span style="color:#75715e"># 先到prod分支&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout -b prod-fix &lt;span style="color:#75715e"># 从prod分支拷贝一个新的分支叫prod-fix&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2>&lt;/h2>
&lt;h1 id="用命令pull-request代码">用命令pull request代码&lt;/h1>
&lt;pre tabindex="0">&lt;code># 把本地的代码切换到master
git checkout -b theme-next-master master
# https://github.com/theme-next/hexo-theme-next.git 是要合并的代码
git pull https://github.com/theme-next/hexo-theme-next.git master
&lt;/code>&lt;/pre>&lt;h1 id="git-key">Git Key&lt;/h1>
&lt;pre tabindex="0">&lt;code>cd ~/.ssh
ssh-keygen
cat ~/.ssh/id_rsa.pub
&lt;/code>&lt;/pre>&lt;h1 id="git-bash启动慢">Git Bash启动慢&lt;/h1>
&lt;pre tabindex="0">&lt;code>git config --global core.preloadindex true
git config --global core.fscache true
git config --global gc.auto 256
&lt;/code>&lt;/pre>&lt;h1 id="推送到远程">推送到远程&lt;/h1>
&lt;pre tabindex="0">&lt;code>git init
git add README.md
git commit -m &amp;#34;first commit&amp;#34;
git remote add origin git@github.com:YangAnLin/bbs.git
git push -u origin master
&lt;/code>&lt;/pre>&lt;h1 id="创建新的分支推送到远程">创建新的分支推送到远程&lt;/h1>
&lt;ol>
&lt;li>先创建本地分支&lt;code>git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code>&lt;/li>
&lt;li>本地分支推送到远程服务器时，远程分支自动创建，推送本地分支到远程&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>git push --set-upstream &amp;lt;remote-name&amp;gt; &amp;lt;local-branch-name&amp;gt;:&amp;lt;remote-branch-name&amp;gt;
&amp;lt;remote-name&amp;gt;：远程git服务器名称，一般设为origin
&amp;lt;local-branch-name&amp;gt;：本地分支名称
&amp;lt;remote-branch-name&amp;gt;：远程分支名称
最后的结果是: git push --set-upstream origin prerelease:prerelease
prerelease是分支的名字
也可以这样操作:本地有个master_anthony,服务器中没有这个分支,
git push -u origin master_anthony
这个命令,就是把master_anthony分支的代码,提交到远程,还要在远程创建这个分支
&lt;/code>&lt;/pre>&lt;h1 id="删除远程仓库文件">删除远程仓库文件&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 加上 -n 这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git rm -r -n --cached 文件/文件夹名称
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git rm -r --cached 文件/文件夹名称
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;提交说明&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="撤销修改">撤销修改&lt;/h1>
&lt;pre tabindex="0">&lt;code># 工作区修改过了,恢复工作区
git checkout -- file
# 已经commit了,但是还没有push
git reset --soft HEAD^
# 现在就已经把暂存区恢复到工作了
&lt;/code>&lt;/pre>&lt;h1 id="版本回退reset">版本回退reset&lt;/h1>
&lt;p>reset用于回退版本，可以遗弃不再使用的提交&lt;/p></description><content>&lt;h1 id="分支管理">分支管理&lt;/h1>
&lt;h2 id="切一个新的本地分支">切一个新的本地分支&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 先切换到需要复制的分支,比如想从prod分支,切一个新的分支&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout prod &lt;span style="color:#75715e"># 先到prod分支&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout -b prod-fix &lt;span style="color:#75715e"># 从prod分支拷贝一个新的分支叫prod-fix&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2>&lt;/h2>
&lt;h1 id="用命令pull-request代码">用命令pull request代码&lt;/h1>
&lt;pre tabindex="0">&lt;code># 把本地的代码切换到master
git checkout -b theme-next-master master
# https://github.com/theme-next/hexo-theme-next.git 是要合并的代码
git pull https://github.com/theme-next/hexo-theme-next.git master
&lt;/code>&lt;/pre>&lt;h1 id="git-key">Git Key&lt;/h1>
&lt;pre tabindex="0">&lt;code>cd ~/.ssh
ssh-keygen
cat ~/.ssh/id_rsa.pub
&lt;/code>&lt;/pre>&lt;h1 id="git-bash启动慢">Git Bash启动慢&lt;/h1>
&lt;pre tabindex="0">&lt;code>git config --global core.preloadindex true
git config --global core.fscache true
git config --global gc.auto 256
&lt;/code>&lt;/pre>&lt;h1 id="推送到远程">推送到远程&lt;/h1>
&lt;pre tabindex="0">&lt;code>git init
git add README.md
git commit -m &amp;#34;first commit&amp;#34;
git remote add origin git@github.com:YangAnLin/bbs.git
git push -u origin master
&lt;/code>&lt;/pre>&lt;h1 id="创建新的分支推送到远程">创建新的分支推送到远程&lt;/h1>
&lt;ol>
&lt;li>先创建本地分支&lt;code>git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code>&lt;/li>
&lt;li>本地分支推送到远程服务器时，远程分支自动创建，推送本地分支到远程&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>git push --set-upstream &amp;lt;remote-name&amp;gt; &amp;lt;local-branch-name&amp;gt;:&amp;lt;remote-branch-name&amp;gt;
&amp;lt;remote-name&amp;gt;：远程git服务器名称，一般设为origin
&amp;lt;local-branch-name&amp;gt;：本地分支名称
&amp;lt;remote-branch-name&amp;gt;：远程分支名称
最后的结果是: git push --set-upstream origin prerelease:prerelease
prerelease是分支的名字
也可以这样操作:本地有个master_anthony,服务器中没有这个分支,
git push -u origin master_anthony
这个命令,就是把master_anthony分支的代码,提交到远程,还要在远程创建这个分支
&lt;/code>&lt;/pre>&lt;h1 id="删除远程仓库文件">删除远程仓库文件&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 加上 -n 这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git rm -r -n --cached 文件/文件夹名称
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git rm -r --cached 文件/文件夹名称
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;提交说明&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="撤销修改">撤销修改&lt;/h1>
&lt;pre tabindex="0">&lt;code># 工作区修改过了,恢复工作区
git checkout -- file
# 已经commit了,但是还没有push
git reset --soft HEAD^
# 现在就已经把暂存区恢复到工作了
&lt;/code>&lt;/pre>&lt;h1 id="版本回退reset">版本回退reset&lt;/h1>
&lt;p>reset用于回退版本，可以遗弃不再使用的提交&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-prolog" data-lang="prolog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">#&lt;/span> &lt;span style="color:#e6db74">查看日志提交log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#e6db74">git&lt;/span> &lt;span style="color:#e6db74">log&lt;/span> &lt;span style="color:#e6db74">--pretty&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">oneline&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">c27561bbe42dc1ae1b08442ce0d8100d4e02a689&lt;/span> (HEAD &lt;span style="color:#e6db74">-&amp;gt;&lt;/span> &lt;span style="color:#e6db74">master&lt;/span>) &lt;span style="color:#e6db74">stage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">fd6bc87438d26b24c93441b82c8840a9ad47e32&lt;/span> &lt;span style="color:#e6db74">test_3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">66&lt;/span>&lt;span style="color:#e6db74">f444c9de0b3c2d1cddb8f17becca7ce774a7c7&lt;/span> &lt;span style="color:#e6db74">test_2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2502&lt;/span>&lt;span style="color:#e6db74">c400cab4d7cb48ed3e4200577f428904da9b&lt;/span> &lt;span style="color:#e6db74">test_1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">26&lt;/span>&lt;span style="color:#e6db74">d73f758411c3656b7fa243d77837943a6c782c&lt;/span> &lt;span style="color:#ae81ff">321321&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#e6db74">fa733378d5eb187d1d46bf2d2395e6c67867a8d&lt;/span> &lt;span style="color:#e6db74">测试&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">e9fa63e3bafc275e99cc88b40cc68bde6933323c&lt;/span> &lt;span style="color:#ae81ff">123&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#e6db74">d338b67e2b57dcd6887099cb3977f5d96b3cbb5&lt;/span> &lt;span style="color:#e6db74">第一次提交&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">#&lt;/span> &lt;span style="color:#e6db74">远程地址回退版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">#&lt;/span> &lt;span style="color:#e6db74">先让本地回退到指定版本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">git&lt;/span> &lt;span style="color:#e6db74">reset&lt;/span> &lt;span style="color:#e6db74">--hard&lt;/span> HEAD&lt;span style="color:#e6db74">^&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">#&lt;/span>&lt;span style="color:#a6e22e">再推送到远程&lt;/span>(&lt;span style="color:#e6db74">这样也会把别人提交的给弄消息了&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">git&lt;/span> &lt;span style="color:#e6db74">push&lt;/span> &lt;span style="color:#e6db74">--force&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">#&lt;/span> &lt;span style="color:#e6db74">操作记录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span> &lt;span style="color:#e6db74">git&lt;/span> &lt;span style="color:#e6db74">reflog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">c27561b&lt;/span> (HEAD &lt;span style="color:#e6db74">-&amp;gt;&lt;/span> &lt;span style="color:#e6db74">master&lt;/span>) HEAD&lt;span style="color:#e6db74">@&lt;/span>{&lt;span style="color:#ae81ff">0&lt;/span>}&lt;span style="color:#e6db74">:&lt;/span> commit: &lt;span style="color:#e6db74">stage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">fd6bc8&lt;/span> HEAD&lt;span style="color:#e6db74">@&lt;/span>{&lt;span style="color:#ae81ff">1&lt;/span>}&lt;span style="color:#e6db74">:&lt;/span> reset: &lt;span style="color:#e6db74">moving&lt;/span> &lt;span style="color:#e6db74">to&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">fd6bc8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">66&lt;/span>&lt;span style="color:#e6db74">f444c&lt;/span> HEAD&lt;span style="color:#e6db74">@&lt;/span>{&lt;span style="color:#ae81ff">2&lt;/span>}&lt;span style="color:#e6db74">:&lt;/span> reset: &lt;span style="color:#e6db74">moving&lt;/span> &lt;span style="color:#e6db74">to&lt;/span> HEAD&lt;span style="color:#e6db74">^&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">fd6bc8&lt;/span> HEAD&lt;span style="color:#e6db74">@&lt;/span>{&lt;span style="color:#ae81ff">3&lt;/span>}&lt;span style="color:#e6db74">:&lt;/span> commit: &lt;span style="color:#e6db74">test_3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">66&lt;/span>&lt;span style="color:#e6db74">f444c&lt;/span> HEAD&lt;span style="color:#e6db74">@&lt;/span>{&lt;span style="color:#ae81ff">4&lt;/span>}&lt;span style="color:#e6db74">:&lt;/span> commit: &lt;span style="color:#e6db74">test_2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">2502&lt;/span>&lt;span style="color:#e6db74">c40&lt;/span> HEAD&lt;span style="color:#e6db74">@&lt;/span>{&lt;span style="color:#ae81ff">5&lt;/span>}&lt;span style="color:#e6db74">:&lt;/span> commit: &lt;span style="color:#e6db74">test_1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">26&lt;/span>&lt;span style="color:#e6db74">d73f7&lt;/span> HEAD&lt;span style="color:#e6db74">@&lt;/span>{&lt;span style="color:#ae81ff">6&lt;/span>}&lt;span style="color:#e6db74">:&lt;/span> commit: &lt;span style="color:#ae81ff">321321&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#e6db74">fa7333&lt;/span> HEAD&lt;span style="color:#e6db74">@&lt;/span>{&lt;span style="color:#ae81ff">7&lt;/span>}&lt;span style="color:#e6db74">:&lt;/span> commit: &lt;span style="color:#e6db74">测试&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">e9fa63e&lt;/span> HEAD&lt;span style="color:#e6db74">@&lt;/span>{&lt;span style="color:#ae81ff">8&lt;/span>}&lt;span style="color:#e6db74">:&lt;/span> commit: &lt;span style="color:#ae81ff">123&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#e6db74">d338b6&lt;/span> HEAD&lt;span style="color:#e6db74">@&lt;/span>{&lt;span style="color:#ae81ff">9&lt;/span>}&lt;span style="color:#e6db74">:&lt;/span> &lt;span style="color:#a6e22e">commit&lt;/span> (&lt;span style="color:#e6db74">initial&lt;/span>)&lt;span style="color:#e6db74">:&lt;/span> &lt;span style="color:#e6db74">第一次提交&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="版本回退revert">版本回退revert&lt;/h1>
&lt;p>&lt;img src="https://image.runtimes.cc/202404051416064.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">git reset &amp;lt;ID&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">git push&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>📌 操作同一个文件的时候,容易冲突&lt;/p>
&lt;h1 id="分支管理-1">分支管理&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Shell" data-lang="Shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 查看提交历史&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git log --graph --pretty&lt;span style="color:#f92672">=&lt;/span>oneline
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 删除本地分支&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git branch -d localBranchName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 删除远程分支&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push origin --delete remoteBranchName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置全局默认的分支名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --global init.defaultBranch &amp;lt;名称&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 修改分支名字&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git branch -m &amp;lt;name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="tag管理">TAG管理&lt;/h1>
&lt;p>查看本地所有的tag&lt;/p>
&lt;pre tabindex="0">&lt;code>git tag
&lt;/code>&lt;/pre>&lt;p>新建tag&lt;/p>
&lt;pre tabindex="0">&lt;code># 在本地创建一个tag
git tag v2.0
# 把本地所有tag推送到远程
git push --tags
# 把指定的tag推送到远程
git push origin [tagname]
&lt;/code>&lt;/pre>&lt;h1 id="git子模块">Git子模块&lt;/h1>
&lt;h2 id="克隆项目指定分支">克隆项目指定分支&lt;/h2>
&lt;pre tabindex="0">&lt;code>git clone -b prod https://git.oschina.net/oschina/android-app.git
&lt;/code>&lt;/pre>&lt;h2 id="克隆项目">克隆项目&lt;/h2>
&lt;p>第一种方式:&lt;/p>
&lt;pre tabindex="0">&lt;code>先clone父项目
git clone sum.git
再初始化子项目
git submodule init
git submodule foreach git pull
再更新子项目
git submodule update
&lt;/code>&lt;/pre>&lt;p>第二中方法&lt;/p>
&lt;pre tabindex="0">&lt;code># 克隆完整的项目
git clone git@github.com:jjz/pod-project.git --recursive
&lt;/code>&lt;/pre>&lt;h2 id="添加项目">添加项目&lt;/h2>
&lt;pre tabindex="0">&lt;code>git submodule add module1.git
&lt;/code>&lt;/pre>&lt;h1 id="rebase">Rebase&lt;/h1>
&lt;pre tabindex="0">&lt;code># 进入编辑模式
git rebase -i N
&lt;/code>&lt;/pre>&lt;p>这些 commit 自旧到新由上而下排列&lt;/p>
&lt;p>在合并 commit 这个需求里，我们可以选择 pick(p) 最旧的 commit1，然后在后续的 commit_id 前添加 squash(s) 命令，将这些 commits 都合并到最旧的 commit1 上。&lt;/p>
&lt;p>保存 rebase 结果后，再编辑 commit 信息，使这次 rebase 失效，git 会将之前的这些 commit 都删除，并将其更改合并为一个新的 commit5&lt;/p>
&lt;p>提交的过程中,可能需要加 &lt;code>-f&lt;/code> 强制推送&lt;/p>
&lt;p>操作过程中,遇到出错,使用&lt;/p>
&lt;pre tabindex="0">&lt;code>git rebase --abort/--continue/--edit-todo
&lt;/code>&lt;/pre>&lt;h1 id="要注意的">要注意的&lt;/h1>
&lt;ul>
&lt;li>进入到子项目的目录中,默认的分支并不是master,需要手动切换到master&lt;/li>
&lt;li>删除子模块的,没有这样的功能,需要手动修改&lt;code>.gitmodules&lt;/code>文件&lt;/li>
&lt;li>添加了新的子模块之后,&lt;code>.gitmodules&lt;/code>就会被创建或者是修改,这个文件需要推送到远程仓库&lt;/li>
&lt;/ul>
&lt;h1 id="储藏">储藏&lt;/h1>
&lt;p>比如在当前分支正在开发,突然来了一个bug,但是当前写的代码又不能提交,需要先储藏起来&lt;/p>
&lt;pre tabindex="0">&lt;code> git stash
&lt;/code>&lt;/pre>&lt;p>等bug改好,再回来&lt;/p>
&lt;pre tabindex="0">&lt;code>git stash pop
&lt;/code>&lt;/pre>&lt;h1 id="升级">升级&lt;/h1>
&lt;p>window&lt;/p>
&lt;pre tabindex="0">&lt;code>git update-git-for-windows
&lt;/code>&lt;/pre>&lt;h1 id="github更新fork别人的项目">Github更新fork别人的项目&lt;/h1>
&lt;p>1.打开自己的仓库，进入code下面&lt;/p>
&lt;p>2.点击new pull request创建
&lt;img src="https://image.runtimes.cc/202404051418900.png" alt="">&lt;/p>
&lt;h1 id="终端配置github-person-token">终端配置github person token&lt;/h1>
&lt;p>应用场景 Github Personal Access Token in Jenkins&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 在命令行中的用户主目录创建如下文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vi .git-credentials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 写入如下内容，请注意将 {username}, {password} 替换成自己的 github 用户名和 token&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://&lt;span style="color:#f92672">{&lt;/span>username&lt;span style="color:#f92672">}&lt;/span>:&lt;span style="color:#f92672">{&lt;/span>password&lt;span style="color:#f92672">}&lt;/span>@github.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 退出保存,执行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --global credential.helper store
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="sourcetree">SourceTree&lt;/h1>
&lt;h2 id="各种状态">各种状态&lt;/h2>
&lt;p>1.添加文件或者修改文件
uncommitted changes 这次是添加了&lt;code>f.txt&lt;/code>文件
&lt;img src="https://image.runtimes.cc/202404051418039.png" alt="未提交">&lt;/p>
&lt;p>2.add的状态
&lt;img src="https://image.runtimes.cc/202404051418540.png" alt="add">&lt;/p>
&lt;p>3.提交的状态
这里&lt;code>超前一个版本&lt;/code>,是相对远程
&lt;img src="https://image.runtimes.cc/202404051418125.png" alt="提交">&lt;/p>
&lt;p>4.推送完的状态
&lt;img src="https://image.runtimes.cc/202404051418448.png" alt="提交">&lt;/p>
&lt;h2 id="rebase分支">rebase分支&lt;/h2>
&lt;p>1.这里的分割线的这次提交是用来分区之前的测试,表示新的测试,测试rebase分支,相当于原始的样子
&lt;img src="https://image.runtimes.cc/202404051418043.png" alt="原始状态">&lt;/p>
&lt;p>2.如果现在想要开发一个新的功能
先在远程的main分支上右键,检出一个自己的分支&lt;code>dev&lt;/code>
&lt;img src="https://image.runtimes.cc/202404051419575.png" alt="">
&lt;img src="https://image.runtimes.cc/202404051518534.png" alt="">
&lt;img src="https://image.runtimes.cc/202404051419385.png" alt="">&lt;/p>
&lt;p>3.在dev分支上新建/或者编辑文件,我这里创建的一个文件,叫&lt;code>dev分支创建的文件.txt&lt;/code>,然后提交到本地,&lt;code>不要推送&lt;/code>
&lt;img src="https://image.runtimes.cc/202404051419086.png" alt="">
这里的&lt;code>超前1个版本&lt;/code>,是相对于&lt;code>origin/main&lt;/code>来说的&lt;/p>
&lt;p>4.再切换到main分支&lt;/p>
&lt;ol>
&lt;li>
&lt;p>我这里创建了一个文件,叫&lt;code>master分支创建的文件.txt&lt;/code>,提交并且推送到远程
(这个操作相当于,你在dev分支 开发自己的功能,然后有别的同事提交了新的代码提交到&lt;code>main&lt;/code>分支)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>pull main分支的代码&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>5.再切换的dev分支,选中main分支,右键,选择将当前变更变基到main
&lt;img src="https://image.runtimes.cc/202404051420630.png" alt="">&lt;/p>
&lt;p>这里的:&lt;/p>
&lt;ul>
&lt;li>超前1个版本: 相当于本地的dev分支来说&lt;/li>
&lt;li>落后一个版本: 相对于远程分支来说&lt;/li>
&lt;/ul>
&lt;p>如果有冲突则合并冲突，点击左上角(中间位置)的提交，选择继续变基&lt;/p>
&lt;ul>
&lt;li>1.第三步 的操作,已经提交到本地了&lt;/li>
&lt;li>2.如果这里解决冲突,就相当于,有编辑了一次文件&lt;/li>
&lt;li>3.再把编辑的提交一次到本地&lt;/li>
&lt;/ul>
&lt;p>6.此时我们的本地更新是基于最新的 main 分支
&lt;img src="https://image.runtimes.cc/202404051420367.png" alt="">
点击推送,把dev分支,推送到远程
&lt;img src="https://image.runtimes.cc/202404051420877.png" alt="">&lt;/p>
&lt;p>7.切换到main分支,点拉取,拉取dev分支到main分支
&lt;img src="https://image.runtimes.cc/202404051420776.png" alt="">
&lt;img src="https://image.runtimes.cc/202404051420936.png" alt="">&lt;/p>
&lt;p>再推送main
&lt;img src="https://image.runtimes.cc/202404051420518.png" alt="">
&lt;img src="https://image.runtimes.cc/202404051420688.png" alt="">&lt;/p></content></item></channel></rss>